<?xml version="1.0" encoding="UTF-8"?>
<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>Akeeba Subscriptions User's Guide</title>

    <author>
      <personname><firstname>Nicholas</firstname><othername>K.</othername><surname>Dionysopoulos</surname></personname>

      <affiliation>
        <orgname>AkeebaBackup.com</orgname>
      </affiliation>
    </author>

    <pubdate>December 2011</pubdate>

    <revhistory>
      <revision>
        <revnumber>1.0.b1</revnumber>

        <date>April 2011</date>

        <author>
          <personname><firstname>Nicholas</firstname><othername>K.</othername><surname>Dionysopoulos</surname></personname>
        </author>
      </revision>

      <revision>
        <revnumber>1.0.b4</revnumber>

        <date>July 2011</date>

        <author>
          <personname><firstname>Nicholas</firstname><othername>K.</othername><surname>Dionysopoulos</surname></personname>
        </author>
      </revision>

      <revision>
        <revnumber>1.0.0</revnumber>

        <date>September 2011</date>

        <author>
          <personname><firstname>Nicholas</firstname><othername>K.</othername><surname>Dionysopoulos</surname></personname>
        </author>
      </revision>

      <revision>
        <revnumber>2.0.a2</revnumber>

        <date>October 2011</date>

        <author>
          <personname><firstname>Nicholas</firstname><othername>K.</othername><surname>Dionysopoulos</surname></personname>
        </author>
      </revision>

      <revision>
        <revnumber>2.0.b2</revnumber>

        <date>December 2011</date>

        <author>
          <personname><firstname>Nicholas</firstname><othername>K.</othername><surname>Dionysopoulos</surname></personname>
        </author>
      </revision>

      <revision>
        <revnumber>2.0.RC1</revnumber>

        <date>January 2012</date>

        <author>
          <personname><firstname>Nicholas</firstname><othername>K.</othername><surname>Dionysopoulos</surname></personname>
        </author>
      </revision>
    </revhistory>

    <legalnotice>
      <para>Permission is granted to copy, distribute and/or modify this
      document under the terms of the GNU Free Documentation License, Version
      1.3 or any later version published by the Free Software Foundation; with
      no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
      copy of the license can be found on-line at <link
      xlink:href="http://www.gnu.org/licenses/fdl.html">http://www.gnu.org/licenses/fdl.html</link>.</para>
    </legalnotice>

    <abstract>
      <para>This book covers the use of the Akeeba Subscriptions component and
      its bundled modules and plugins for selling and managing subscriptions
      on your <trademark>Joomla!</trademark>-powered web sites.</para>
    </abstract>
  </info>

  <chapter xml:id="intro-and-installation">
    <title>Introduction and installation</title>

    <section xml:id="introduction">
      <title>Introducing Akeeba Subscriptions</title>

      <bridgehead>At a glance</bridgehead>

      <para>Akeeba Subscriptions is a subscriptions management component for
      <trademark>Joomla!</trademark> 1.5/1.6/1.7 and compatible distributions.
      It is built using our renowned Framework on Framework architecture which
      extends the standard Joomla! API, ensuring greater stability and
      compatibility across different Joomla! releases. It is licensed under
      the <link xlink:href="http://www.gnu.org/licenses/gpl.html">GNU General
      Public License (GPL) version 3</link> or –at your option– any later
      version published by the Free Software Foundation. It licensing scheme
      means that you are free (and, in fact, more than welcome) to install it
      on as many sites as you want, whenever you want and use it for as long
      as you want, no strings attached. There are no secret per-domain
      licensing fees and you can use it to sell one or several millions of
      subscriptions without any hidden costs. We love Freedom of choice as
      much as you do!</para>

      <bridgehead>The killer features</bridgehead>

      <para>Its feature list is nothing short of amazing. Out of the box,
      Akeeba Subscriptions supports these features:</para>

      <itemizedlist>
        <listitem>
          <para>Streamlined administrator interface which can even present you
          an interactive sales graph and sales report as soon as you launch
          the component</para>
        </listitem>

        <listitem>
          <para>Rich subscription levels (subscription packages) editor which
          allows you to choose different images for each of your subscriptions
          and even a different order confirmation and order cancellation text
          to show to your users.</para>
        </listitem>

        <listitem>
          <para>The easiest subscription management interface you've seen on a
          component. It will even show you your users' faces, powered by
          Gravatar.</para>
        </listitem>

        <listitem>
          <para>Users can upgrade or expand (renew) their subscriptions.
          Renewing a subscription will create a new subscription which becomes
          valid the very second their old one expires. Users do not lose any
          of their subscription time when renewing, unlike most other
          subscription systems out there.</para>
        </listitem>

        <listitem>
          <para>Full support for delayed payments, e.g. when using e-checks
          with PayPal.</para>
        </listitem>

        <listitem>
          <para>Discount coupon codes which allow you to set an absolute money
          value or percentage discount for all or a specific subscription
          level and user, have publish up/publish down dates or a usage limit
          (e.g. the coupon code is valid only for the first 100 people to use
          it) – or a combination of any and all of the above!</para>
        </listitem>

        <listitem>
          <para>Automatic discounts for upgrading or renewing subscriptions
          based on the subscription level and days of presence in the
          subscription package. This allows you to easily create rules like:
          30% discount if you renew up to 30 days before the end of your
          subscription, 15% discount if you renew within the last 30 days, no
          discount otherwise.</para>
        </listitem>

        <listitem>
          <para>Full support for complex tax calculations based on country,
          state and ZIP code. It fully integrates with the European Union's
          VIES system so that you can charge no VAT tax for intra-EU B2B
          transactions.</para>
        </listitem>

        <listitem>
          <para>The subscription form can work with or without Javascript.
          With Javascript it becomes a fully fledged, auto-validating
          subscription form. Without Javascript it works as a standard web
          form, accessible to users who do not wish / cannot use Javascript on
          their browser.</para>
        </listitem>

        <listitem>
          <para>Integration with Joomla! 1.6/1.7 and later user group
          mapping</para>
        </listitem>

        <listitem>
          <para>Integration with third party components: JUGA, K2, DOCman,
          JCE, NinjaBoard, VirtueMart, Tienda, JomSocial, Community Builder,
          ccInvoices and much more! Check out our documentation for more
          information.</para>
        </listitem>

        <listitem>
          <para>Content restriction: a content plugin to show parts of your
          content only to registered subscribers, without the need of any
          external tool.</para>
        </listitem>

        <listitem>
          <para>Payment methods: PayPal (for personal, verified and business
          accounts) is supported out of the box. Other payment methods
          (ccAvenue, WorldPay, 2Checkout and more) are being added
          continuously. Check out our documentation for more
          information.</para>
        </listitem>

        <listitem>
          <para>Send emails to subscribers upon subscription, when their
          subscription/payment status changes and when their subscription is
          about to expire</para>
        </listitem>
      </itemizedlist>

      <bridgehead>Support policy</bridgehead>

      <para>Please note that the software is provided free of charge, but
      support is not. You need to have an AKEEBADELUXE, SUPPORT or
      FORUMSUPPORT subscription on AkeebaBackup.com to seek support regarding
      setting up, using and customizing Akeeba Subscriptions.</para>
    </section>

    <section xml:id="requirements">
      <title>Requirements and compatibility</title>

      <para>Akeeba Subscriptions 1.0.b4 and later will attempt to detect if
      your server meets the minimum requirements. If it does not, it will only
      do a partial installation (no plugins and modules will be installed) and
      you will be presented with an error message. In any case, Akeeba
      Subscriptions requires the following server-side configuration:</para>

      <itemizedlist>
        <listitem>
          <para>PHP 5.2.7 or later. Running it on earlier versions will either
          be problematic or it won't work at all.</para>
        </listitem>

        <listitem>
          <para>MySQL 5.0.41 or later. Earlier database server versions will
          not be supported. Do note that earlier releases of MySQL are
          obsolete and not supported any more by Oracle (the company who
          controls the development of MySQL).</para>
        </listitem>

        <listitem>
          <para>Joomla! 1.5.14 or later (fully supported) or Joomla! 1.6.0 or
          later.</para>
        </listitem>
      </itemizedlist>

      <para>Since version 2.0.a1, Akeeba Subscriptions no longer uses the
      Nooku Framework which extends its compatibility with more server
      environments and third-party software.</para>

      <important>
        <para>If you installed Akeeba Subscriptions 1.0.b4 or earlier on your
        site and your site displays a blank page, please remove the
        <filename>index.html</filename> files from your site's root and your
        site's administrator directories.</para>
      </important>
    </section>

    <section xml:id="installation-instructions">
      <title>Installation</title>

      <section xml:id="installation">
        <title>Installation</title>

        <para>Installing the package is the same as with any other Joomla!
        component. Go to your site's back-end, Extensions, Install/Uninstall
        (Joomla! 1.5) or Extensions, Manage (Joomla! 1.6) and click on Browse.
        Locate the ZIP package and click on Upload and Install. If the
        installation fails, please refer to the installation troubleshooting
        section of this guide.</para>
      </section>

      <section xml:id="installation-troubleshooting">
        <title>Installation troubleshooting</title>

        <bridgehead>Joomla! 1.6/1.7 is logging you out during
        installation</bridgehead>

        <para>The first thing you might observe is that <emphasis
        role="bold">Joomla! 1.6 is logging you out when trying to
        install</emphasis> Akeeba Subscriptions. This is due to a bug in
        Joomla! 1.6. Please <link
        xlink:href="http://docs.joomla.org/Why_does_the_administrator_logoff_all_of_the_sudden">follow
        these instructions</link> to fix the database table that causes this
        issue. After doing that you will have to log in again to your site.
        You will see that everything is missing from the back-end interface.
        Don't panic! That's part of the Joomla! bug. Just log out using the
        link on the top-right of your page, then log back in. Everything is
        back to normal and you can retry the installation.</para>

        <bridgehead>Joomla! 1.6/1.7 says "can't build admin menu" and
        fails</bridgehead>

        <note>
          <para>This problem should have gone away since Akeeba Subscriptions
          1.0.0 (Stable) and later releases</para>
        </note>

        <para>On some other occasions, especially when trying to install or
        update the component after an installation error, Joomla! will
        complain that it <emphasis role="bold">cannot build admin
        menus</emphasis>. This is due to another Joomla! 1.6 bug <link
        xlink:href="http://joomlacode.org/gf/project/joomla/tracker/?action=TrackerItemEdit&amp;tracker_item_id=25663">we
        have sent a patch for</link> to the Joomla! development team.
        Meanwhile, you will have to run a few SQL statements against your
        database with a database editor such as phpMyAdmin:</para>

        <programlisting>DELETE FROM jos_assets WHERE `name` = 'com_akeebasubs';
DELETE FROM jos_menu WHERE `menutype` = 'main' AND `alias` = 'com_akeebasubs';
DELETE FROM jos_extensions WHERE `type` = 'component' AND `element` = 'com_akeebasubs';</programlisting>

        <para>Remember to change <replaceable>jos_</replaceable> with your
        database tables' name prefix if you changed it during installation!
        It's easy to find out what it is. Take a look at the database and
        you'll see that all of your tables begin with the same few letters.
        That's your prefix. After running those SQL statements you can proceed
        with the reinstallation of the component.</para>

        <bridgehead>Version check</bridgehead>

        <para>Check your Joomla! version. Joomla! 1.5.0 through 1.5.10 cannot
        install Akeeba Subscriptions. This is a limitation of these extremely
        outdated releases. If you have such a site, upgrade it. Joomla! 1.5.11
        through 1.5.14 may or may not be able to install Akeeba Subscriptions.
        Again, these are limitations of those outdated Joomla! releases on
        certain hosts. The only workaround is to upgrade your Joomla!
        installation.</para>

        <para>If you have Joomla! 1.6 make sure that you are using Joomla!
        1.6.0 (the "stable" release, not the RC or any of the betas). Mind
        you, we have only tested the installation with Joomla! 1.6.2 and later
        releases. Akeeba Subscriptions works perfectly on Joomla! 1.7
        sites.</para>

        <bridgehead>Checking your temporary directory</bridgehead>

        <para>First, we will have to make sure that you are using a valid
        temporary directory. Many sites are configured to use the system-wide
        (/tmp) directory or an invalid directory, causing installation
        problems. In order to change your site's temporary directory setting
        you have to follow this procedure, depending on your Joomla!
        version.</para>

        <bridgehead renderas="sect4">Joomla! 1.5</bridgehead>

        <orderedlist>
          <listitem>
            <para>Go to your site's administrator back-end and click
            <guimenu>Help</guimenu>, <guimenuitem>System Info</guimenuitem>
            from the top menu.</para>
          </listitem>

          <listitem>
            <para>Click on the <guilabel>Directory permissions</guilabel>
            link</para>
          </listitem>

          <listitem>
            <para>Scroll down the page and find the first <guilabel>Cache
            Directory</guilabel> line. It is the fourth from the bottom of the
            page.</para>
          </listitem>

          <listitem>
            <para>Next to the <guilabel>Cache directory</guilabel> label you
            can see a path, e.g.
            <filename>/home/myuser/public_html/cache</filename></para>
          </listitem>

          <listitem>
            <para>Replace the <filename>cache</filename> word with
            <filename>tmp</filename> in that path, i.e.
            <filename>/home/myuser/public_html/tmp</filename> and note down
            this path. This is your new temp path.</para>
          </listitem>

          <listitem>
            <para>Go to <guimenu>Site</guimenu>, <guimenuitem>Global
            Configuration</guimenuitem> menu item from the top menu.</para>
          </listitem>

          <listitem>
            <para>Click on the <guilabel>Server</guilabel> link</para>
          </listitem>

          <listitem>
            <para>Find the "Path to Temp-folder" and replace its contents with
            the new temp path from step #5.</para>
          </listitem>

          <listitem>
            <para>Save your Global Configuration</para>
          </listitem>
        </orderedlist>

        <bridgehead renderas="sect4">Joomla! 1.6/1.7</bridgehead>

        <orderedlist>
          <listitem>
            <para>Create a file named mynewtmp.php with the following
            contents:</para>

            <programlisting>&lt;?php echo dirname(__FILE__).'/tmp';</programlisting>
          </listitem>

          <listitem>
            <para>Upload the file to your site and access it as
            http://www.example.com/mynewtmp.php where www.example.com is the
            domain name to your site.</para>
          </listitem>

          <listitem>
            <para>Write down what you see on the screen. That's your new
            temporary directory path.</para>
          </listitem>

          <listitem>
            <para>Remove the mynewtmp.php file from your site.</para>
          </listitem>

          <listitem>
            <para>Go to your site's administrator back-end and click on
            <guimenu>Site</guimenu>, <guimenuitem>Global
            Configuration</guimenuitem> menu item from the top menu.</para>
          </listitem>

          <listitem>
            <para>Click on the <guilabel>Server</guilabel> link</para>
          </listitem>

          <listitem>
            <para>Find the "Path to Temp-folder" and replace its contents with
            the new temp path from step #3.</para>
          </listitem>

          <listitem>
            <para>Save your Global Configuration</para>
          </listitem>
        </orderedlist>

        <bridgehead>Enable FTP</bridgehead>

        <para>On most shared hosts which do not run suPHP (if you didn't
        understand anything, most likely the following <emphasis>is applicable
        to you too</emphasis>) you have to enable Joomla!'s FTP layer.
        Otherwise Joomla! won't be able to write the files to its directories
        and installation will fail.</para>

        <orderedlist>
          <listitem>
            <para>Go to <guimenu>Site</guimenu>, <guimenuitem>Global
            Configuration</guimenuitem> menu item from the top menu.</para>
          </listitem>

          <listitem>
            <para>Click on the <guilabel>Server</guilabel> tab</para>
          </listitem>

          <listitem>
            <para>Set <guilabel>Enable FTP</guilabel> to Yes</para>
          </listitem>

          <listitem>
            <para>In the <guilabel>FTP Host</guilabel> try using
            <option>127.0.0.1</option> or <option>localhost</option> or the
            FTP hostname assigned by your host</para>
          </listitem>

          <listitem>
            <para>In the <guilabel>FTP Username</guilabel> and <guilabel>FTP
            Password</guilabel> fields provide the FTP username and password
            assigned by your host</para>
          </listitem>

          <listitem>
            <para>In the <guilabel>FTP Root</guilabel> you have to type in the
            FTP path to your site's root. Here is the easy way to find it
            using <link
            xlink:href="http://filezilla-project.org/download.php">FileZilla</link>:</para>

            <para>Connect to your site using FileZilla. Navigate inside the
            folder Joomla! is installed in. Usually it's a directory named
            <filename>public_html</filename>, <filename>htdocs</filename>,
            <filename>www</filename> or something similar. If unsure don't ask
            us, ask your host. Now, on the right-hand pane you will find the
            FTP path. Most likely it will look something like
            <filename>/public_html</filename>. Copy this and paste it into the
            FTP Root text box in your Joomla!'s Global Configuration
            page.</para>
          </listitem>

          <listitem>
            <para>Save your Global Configuration. If you got everything
            correctly, you should see a message that your configuration was
            saved. If you see an error message please seek assistance on the
            <link xlink:href="http://forum.joomla.org">Joomla!
            Forum</link>.</para>
          </listitem>
        </orderedlist>

        <bridgehead>Manual installation</bridgehead>

        <para>Sometimes <trademark>Joomla!</trademark> is unable to properly
        extract ZIP archives due to technical limitations on your server. In
        this case, you can follow a manual installation procedure.</para>

        <para>First, you have to extract the installation ZIP file in a
        subdirectory named <filename>akeeba</filename> on your local PC. Then,
        upload the entire subdirectory inside your site's temporary directory.
        At this point, there should be a subdirectory named
        <filename>akeeba</filename> inside your site's temporary directory
        which contains all of the ZIP package's files.</para>

        <para>If you are unsure where your site's temporary directory is
        located, you can look it up by going to the <guimenuitem>Global
        Configuration</guimenuitem>, click on the <guilabel>Server</guilabel>
        tab and take a look at the <guilabel>Path to Temp-folder</guilabel>
        setting. The default setting is the <filename>tmp</filename> directory
        under your site's root. Rarely, especially on automated installations
        using Fantastico, this might have been assigned the system-wide
        <filename>/tmp</filename> directory. In this case, please consult your
        host for instructions on how to upload files inside this directory, or
        read the instructions above about changing your
        <trademark>Joomla!</trademark> temporary directory back to the default
        location and making it writable.</para>

        <para>Assuming that you are past this uploading step, click on the
        <guimenu>Extensions</guimenu>,
        <guimenuitem>Install/Uninstall</guimenuitem> (Joomla! 1.5) or
        <guimenu>Extensions</guimenu>, <guimenuitem>Manage</guimenuitem>
        (Joomla! 1.6 users) link on the top menu. In this page, locate the
        <guibutton>Install Directory</guibutton> edit box in the
        <guilabel>Install from Directory</guilabel> area. It is already filled
        in with the absolute path to your temporary directory, for example
        <filename>/var/www/joomla/tmp</filename>. Please append
        <filename>/akeeba</filename> to it. As per our example, it should look
        something like <filename>/var/www/joomla/tmp/akeeba</filename>. Then,
        click on the <guibutton>Install</guibutton> button.</para>

        <bridgehead>Still problems?</bridgehead>

        <para>If you still can't install Akeeba Subscriptions and you are
        receiving messages regarding unwritable directories, inability to move
        files or other similar file system related error messages, please do
        not ask us for support. These errors stem from your site set up and
        can best be resolved by asking for help in the <link
        xlink:href="http://forum.joomla.org">official
        <trademark>Joomla!</trademark> forums</link>. We can only support
        software we develop ourselves. Joomla!'s extension installer is
        certainly not developed by us and –believe us– we have tried to
        improve it and submitted some still pending patches to the Joomla!
        project. Therefore we regret that we have to say that, but we can't
        help you. Thank you for your understanding.</para>
      </section>

      <section xml:id="updating">
        <title>Updating to the latest release</title>

        <para>Akeeba Subscriptions can be updated with three different
        methods: installing the new version on top of the old one, using the
        integrated Live Update system or or using the extensions update
        feature in Joomla! 1.6 and later.</para>

        <bridgehead>Updating directly</bridgehead>

        <para>This is the failsafe approach, but the least convenient.
        Download the latest Akeeba Subscriptions release from <link
        xlink:href="https://www.AkeebaBackup.com/latest">https://www.AkeebaBackup.com/latest</link>
        and save the ZIP file to your hard disk. Log in to your site's
        backend, click on <guimenu>Extensions</guimenu>, then
        <guimenuitem>Install/Uninstall</guimenuitem> (Joomla! 1.5) or
        <guimenuitem>Extensions Manager</guimenuitem> (Joomla! 1.6 and later).
        Use the <guibutton>Browse...</guibutton> button to locate the ZIP file
        you downloaded, then click on <guibutton>Upload and
        Install</guibutton>. All Joomla! versions since 1.5.5 are smart enough
        to understand that you're doing an upgrade instead of installation and
        adjust the process accordingly.</para>

        <important>
          <para>Do NOT uninstall Akeeba Subscriptions before updating it!
          Uninstalling will remove all of your data, including all subscriber
          information!</para>
        </important>

        <bridgehead>Using Live Update</bridgehead>

        <para>Since Akeeba Subscriptions 1.0.0 we have integrated our Live
        Update system inside Akeeba Subscriptions. Log in to your site's
        backend and go to <guimenu>Components</guimenu>, <guimenuitem>Akeeba
        Subscriptions</guimenuitem>. Look towards the bottom of the page.
        There should be an icon which reads "Update found" when there is a new
        version available. Click on it and then click on "Update now". The new
        version will be downloaded and installed automatically for you. In
        case this doesn't work, or if "Live Update not supported" is displayed
        below the icon, please make sure that your host's firewall allows
        TCP/IP communications over port 80 and 443 to
        <uri>akeebabackup.com</uri> and <uri>s3.amazonaws.com</uri>. If your
        host requests IP addresses instead of domain names, please ask them to
        trace them from the server as they are multicast hostnames, which
        means that they resolve to a different IP depending on where in the
        world you are.</para>

        <bridgehead>Using Joomla! 1.6 and later's extension
        update</bridgehead>

        <para>Since Joomla! 1.6, the Joomla! Extensions Manager allows
        directly updating your extensions. Just log in to the backend of your
        site and go to <guimenu>Extensions</guimenu>, <guimenuitem>Extension
        Manager</guimenuitem>. Click on the <guilabel>Update</guilabel> link
        below the toolbar. Then click on the <guibutton>Find
        Updates</guibutton> button. If there is a new Akeeba Subscriptions
        release it will appear in the list below. Tick the box on the left of
        the row and then click on the <guibutton>Update</guibutton> button. If
        your site is compatible with this Joomla! feature, you will see the
        new version being installed automatically for you.</para>

        <bridgehead>Something not working right after the update?</bridgehead>

        <para>Sometimes Joomla! "forgets" to copy all updated files. This is
        something that we have seen many times on Joomla! 1.5 sites. In this
        case, simply follow the instructions in the Updating Directly section
        above. This will force Joomla! to retry updating the component,
        copying the missing files and everything will work again.</para>
      </section>
    </section>

    <section xml:id="uninstallation">
      <title>Uninstallation</title>

      <para>You can uninstall the component just like any other Joomla!
      component. In your site's back-end, just go to
      <guimenu>Extensions</guimenu>,
      <guimenuitem>Install/Uninstall</guimenuitem> (Joomla! 1.5) or
      <guimenuitem>Extensions Manager</guimenuitem> (Joomla! 1.6 or later),
      click on <guilabel>Uninstall</guilabel>, select Akeeba Subscriptions and
      click on <guibutton>Uninstall</guibutton>. This will completely remove
      Akeeba Subscriptions including all subscriber information.</para>
    </section>
  </chapter>

  <chapter xml:id="setup-and-usage">
    <title>Initial set-up and usage</title>

    <section xml:id="how-subscriptions-work">
      <title>How subscriptions work</title>

      <para>Before you begin setting up Akeeba Subscriptions, you should be
      aware of the way subscriptions work under the hood. The most basic
      concept is the subscription level (referred to simply as Level from now
      on). This is what you are selling to your customers. Your customers buy
      a subscription to a Level. The composite piece of information containing
      the Level, payment information and expiration time is called a
      Subscription.</para>

      <para>When a user enters the subscription page, Akeeba Subscriptions
      first fetches the price associated with the Level your user wants to
      buy. It will then try to understand if there is an applicable discount.
      First, it will look into Upgrade definitions and produce a list of
      upgrade rules applicable for the user and the Level he wishes to buy. If
      there are multiple applicable upgrade rules, the one giving the maximum
      discount is elected. Next up, it takes a look at the coupon code, is
      supplied. If it is an active coupon and your user can use it to get a
      discount, the coupon's discount is calculated. In the case where there
      are two discounts, both an upgrade discount and a coupon discount, the
      highest one is elected. The level price minus the discount is called the
      Net Price.</para>

      <para>Right up, Akeeba Subscriptions will try to determine the
      applicable tax by going through all the tax rules. It will go through
      the tax rules and keep the one which is the closest match to the
      country, zip code, city and VIES registration status. If no match is
      found, Akeeba Subscriptions will select the tax rate defined in the very
      first tax rule you have defined. This is called the Tax Amount. The sum
      of the Net Price and Tax Amount is the Gross Amount and that's what the
      user will have to pay.</para>

      <para>When the user hits the Subscribe button, Akeeba Subscriptions will
      first check if this is a new or existing user. If it is a new user, it
      will create a new –but inactive– user account based on the information
      the user has supplied. A new, inactive subscription will be created for
      your user and he's redirected to the payment gateway. Exception: if you
      have an 100% or more discount (which means that the user shall pay
      nothing) he's not redirected to the payment gateway. Instead, he's
      redirected to the Subscription Confirmation page and his subscription
      becomes instantly active.</para>

      <para>Once the user finishes the payment, he's redirected to the
      Subscription Confirmation page. If he changes his mind and cancels the
      payment, he will be takes to the Subscription Cancellation page. The
      text on each page is determined by the relevant fields in the Level
      configuration.</para>

      <para>At the same time, your payment processor will send a post-back to
      your site, notifying Akeeba Subscriptions about the payment status. If
      the payment is marked as complete, the subscription is activated. Its
      start and expiration date are calculated based on the exact date and
      time that the payment post-back was received and the Level's configured
      length. If the associated user account was marked as blocked (inactive),
      it is activated. If any integrations are set up, they will run. For
      example, you may be adding users to JUGA groups upon a successful
      subscription.</para>

      <para>Based on the above, you need to configure the following –in the
      order shown– for Akeeba Subscriptions to work:</para>

      <itemizedlist>
        <listitem>
          <para>Configuration Options - well, that's just the currency you're
          selling in!</para>
        </listitem>

        <listitem>
          <para>Subscription Levels - the subscription products you are
          selling, i.e. your inventory</para>
        </listitem>

        <listitem>
          <para>Tax Rules - determine if the user has to be charged taxes over
          the subscription amount and how much that will be</para>
        </listitem>

        <listitem>
          <para>Upgrade rules - (optional) discounts based on what other
          products the user has bought and how long he's been a subscriber to
          them</para>
        </listitem>

        <listitem>
          <para>Coupons - (optional) discount codes used for promotions</para>
        </listitem>
      </itemizedlist>

      <para>Alternatively, you can import Subscription Levels and Coupons from
      other subscription systems instead of manually defining them.</para>

      <para>The sections below will tell you how to go through each of these
      steps.</para>
    </section>

    <section xml:id="configuration">
      <title>Configuration options</title>

      <para>Click on <guibutton>Parameters</guibutton> (Joomla! 1.5) or
      <guibutton>Options</guibutton> (Joomla! 1.6, 1.7 and later) in the
      toolbar links area. The available options are:</para>

      <para><guilabel>Currency Options</guilabel></para>

      <variablelist>
        <varlistentry>
          <term>Currency code</term>

          <listitem>
            <para>The <link xlink:href="http://www.xe.com/iso4217.php">three
            letter ISO 4217 currency code</link>. Common values are EUR
            (Euro), USD (United States Dollar), GBP (Great Britain Pound), CAD
            (Canada Dollar), AUD (Australia Dollar), JPY (Japan Yen), CNY
            (China Yuan) and MXN (Mexico, Pesos). This is used on virtually
            all of the payment processors to notify them about the currency
            you're selling your goods in. Please remember that all of your
            payment processors must support the selected currency. Some
            payment processors only accept a subset of currencies, most
            usually only one of USD, GBP and EUR.</para>

            <para>Default: EUR (Euro)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Currency Symbol</term>

          <listitem>
            <para>The currency symbol to be shown to your web visitors, e.g. €
            for Euro, £ for British Pound, $ for US/Australia/Canada Dollar or
            ¥ for Japan Yen. This is free form text used to prefix the prices.
            If your currency has no special symbol you can use text to
            describe it, or leave blank to completely omit the currency symbol
            display throughout the components.</para>

            <para>Default: € (Euro symbol)</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para><guilabel>Back-end display</guilabel></para>

      <variablelist>
        <varlistentry>
          <term>Show Gravatar images in Subscriptions page</term>

          <listitem>
            <para>When enabled, Gravatar images are shown next to each user in
            the Subscriptions page. If disabled, there will be no avatar
            images displayed.</para>

            <para>Default: Yes</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Images directory</term>

          <listitem>
            <para>The directory, relative to your site's root, where the
            subscription level images will be stored.</para>

            <para>Default: images (Joomla! 1.6+) or images/stories (Joomla!
            1.5)</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para><guilabel>Front-end display</guilabel></para>

      <variablelist>
        <varlistentry>
          <term>Show steps bar</term>

          <listitem>
            <para>Should we render the steps bar (1-2-3) on the top of the
            page?</para>

            <para>Default: Yes</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Allow collection of personal information and business
          registrations</term>

          <listitem>
            <para>When enabled, Akeeba Subscriptions will ask for address
            information and business registration information. This
            information is required if you have to issue invoices or receipts
            to your customers. On some jurisdictions, the automatic receipt
            generated by, for example, PayPal is adequate. In this case, there
            is no point collection this information on your site. In this
            case, set this option to No and Akeeba Subscriptions will not ask
            your customers for their address, city, state, ZIP, country,
            business registration, business name, occupation or VAT number.
            This also means that AS will no longer allow different tax rates
            based on city, state, country or VIES registration status; the
            default (first) tax rate will be applied instead.</para>

            <para>Default: Yes</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Show login box</term>

          <listitem>
            <para>When enabled, if the user is not logged in yet when he tries
            to subscribe, a login box will be displayed on top of the
            subscriptions page, allowing her to login to the site. If
            disabled, this login box will not be disabled. Many people have
            reported that the login feature is confusing and redundant, as
            there is usually a login button or module for the same function,
            hence this option.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para><guilabel>Permissions</guilabel> (Joomla! 1.6 or later
      only)</para>

      <para>This is the standard Joomla! 1.6 or later ACL permissions widget.
      The meaning of the different ACL settings is as follows:</para>

      <variablelist>
        <varlistentry>
          <term>Configure</term>

          <listitem>
            <para>Allows the user to access the Options page of the component
            (the very page you are on right now)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Access Component</term>

          <listitem>
            <para>Allows backend access to the component. Frontend access IS
            NOT affected by this setting!</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Create</term>

          <listitem>
            <para>Allows the creation of new records on any backend page (e.g.
            Subscription Levels, Subscriptions, Users, Tax Rules, Coupons and
            so on)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Delete</term>

          <listitem>
            <para>Allows the deletion of records on any backend page</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Edit</term>

          <listitem>
            <para>Allows the user to edit any record on any backend
            page</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Edit State</term>

          <listitem>
            <para>Allows the user to publish/unpublish records on any backend
            page</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section xml:id="subscription-levels">
      <title>Subscription Levels</title>

      <para>You can access this feature by clicking on <guilabel>Subscription
      Levels</guilabel> in the toolbar links area.</para>

      <para>Creating or editing a Subscription Level, you have these
      options:</para>

      <variablelist>
        <varlistentry>
          <term>Title</term>

          <listitem>
            <para>How the subscription will be presented to your users. We
            strongly suggest using all-capital letters and no spaces for
            easier administration, albeit you can really use anything you
            like.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Image</term>

          <listitem>
            <para>Select a picture to represent your subscription. The image
            must be located in your site's images/stories (Joomla! 1.5) or
            images (Joomla! 1.6) directory.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Subscription Length (days)</term>

          <listitem>
            <para>How many days a subscription in this level lasts. Common
            values are 30 (one month), 180 (half a year) and 365 (one
            year).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Price</term>

          <listitem>
            <para>The price of a subscription in this level. If you need to
            enter a decimal value, use a dot as the decimal separator. For
            example, 12.30 is valid, whereas 12,30 is INVALID and will be
            interpreted as 1230. Do NOT use a thousands separator. For example
            1000 is valid, whereas 1,000 is INVALID.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Slug</term>

          <listitem>
            <para>The alias, used to construct the URL. Use only lowercase
            Latin characters without diacritics and accents, dashes and
            underscores. For example <option>uber-sub</option> is valid,
            whereas <option>über SUB</option> is INVALID.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Published</term>

          <listitem>
            <para>Should it be shown to your users?</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Forbid renewals</term>

          <listitem>
            <para>Is set to Yes, a user can subscribe to this level only ONCE.
            He won't be able to renew his subscription. Useful in setting up
            "trial subscriptions", i.e. cheap or even free subscription levels
            with very limited duration which a user can subscribe to only
            once.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>First expiration notification (days)</term>

          <listitem>
            <para>Akeeba Subscriptions will send a notification email to users
            whose subscription is expiring soon. It can send up to two emails.
            This parameter tells Akeeba Subscriptions how many days before the
            subscriptions expiration the first email will be sent. Set to 0 to
            not send out a notification email.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Second expiration notification (days)</term>

          <listitem>
            <para>Akeeba Subscriptions will send a notification email to users
            whose subscription is expiring soon. It can send up to two emails.
            This parameter tells Akeeba Subscriptions how many days before the
            subscriptions expiration the second email will be sent. Set to 0
            to not send out a notification email.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Short Description</term>

          <listitem>
            <para>A description of the subscription to show to your users.
            Keep it short (ca. 30 words or less) or it will overflow the
            boundaries of the subscription presentation areas in the
            front-end.</para>

            <para>Since Akeeba Subscription 1.0.b4 you can use content plugin
            codes (like our own aslink plugin) in the description.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Message to show after successful sign-up</term>

          <listitem>
            <para>The text in this area will be presented to the users after
            they successfully complete their payment. Use it to thank them for
            giving you their money and show them important information about
            their subscription, e.g. links to your support method, download
            links etc.</para>

            <warning>
              <para>Do not include any sensitive information (such as "secret"
              download links) as the content of this page can be directly
              accessed by a knowledgeable user by manipulating the URL. If you
              want to include such information, please use the Restricted
              Content plugin bundled with Akeeba Subscriptions to make sure
              that the information will only be shown to users holding a valid
              subscription.</para>
            </warning>

            <para>Since Akeeba Subscription 1.0.b4 you can use content plugin
            codes (like our own aslink plugin) in the message.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Message to show after sign-up cancellation</term>

          <listitem>
            <para>The text in this area will be presented to the users after
            they cancel their payment (if your payment gateway supports this
            feature). This is your last attempt to changing your user's mind
            or have them give you feedback on the reasons they decided to not
            move forward with their subscription. Use it wisely and do not
            insult your users, please :)</para>

            <para>Since Akeeba Subscription 1.0.b4 you can use content plugin
            codes (like our own aslink plugin) in the message.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <bridgehead>Multi-lingual support</bridgehead>

      <para>Akeeba Subscriptions 2.0 and later are able support multi-lingual
      sites without the need of a third-party extension. This is done by using
      language code "merge tags" in the three last fields outlined above:
      short description, message to show after successful sign-up and message
      to show after sign-up cancellation. The merge tags in the text look like
      this:</para>

      <programlisting>[IFLANG en-GB]This is the English description[/IFLANG]
[IFLANF fr-FR]Ceci est la description française[/IFLANG]
[IFLANG de-DE]Diese ist die deutsche Beschreibung[/IFLANG]
[IFLANG el-GR]Αυτή είναι η Ελληνική περιγραφή[/IFLANG]</programlisting>

      <para>Essentially, you have to wrap your per-language text in
      <code>[IFLANG <replaceable>languageCode</replaceable>]</code> and
      <code>[/IFLANG]</code> merge tags. The languageCode you must use is the
      five letter language code used by Joomla!'s translation packages. For
      example, the English language is en-GB (British English), en-AU
      (Australian English) or en-US (Unites States English), German is de-DE
      (Germany) or de-AT (Austria) and so forth. If you're unsure, please go
      to your site's back-end, Language Manager and take a look at the
      language code in there.</para>

      <para>Please note that you cannot use the same language code
      twice.</para>

      <bridgehead>Customising the messages to show on successful sign-up and
      cancellation</bridgehead>

      <para>Since Akeeba Subscriptions 2.0.a3, you can personalise the
      messages which are shown after a successful sign-up or cancellation of
      the subscription process. This is done using "merge codes". The merge
      codes are explained below. Please note that you can use them in
      conjunction with Joomla! content plugins as well. In fact, using the
      merge codes you are open to a world of possibilities, even integrating
      an external affiliate system –like OSI Affiliates– on your site.</para>

      <para>The available merge codes are:</para>

      <variablelist>
        <varlistentry>
          <term>[SUB:ID]</term>

          <listitem>
            <para>The numeric, unique Subscription ID</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[SUB:USER_ID]</term>

          <listitem>
            <para>The numeric Joomla! user ID of the subscriber</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[SUB:AKEEBASUBS_LEVEL_ID]</term>

          <listitem>
            <para>The numeric ID of the subscription level</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[SUB:PUBLISH_UP]</term>

          <listitem>
            <para>The exact date and time the subscription will be activated
            in YYYY-MM-DD hh:mm:ss format, e.g. 2011-12-31 13:10:50.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[SUB:PUBLISH_DOWN]</term>

          <listitem>
            <para>The exact date and time the subscription will be deactivated
            in YYYY-MM-DD hh:mm:ss format, e.g. 2012-12-31 13:10:49.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[SUB:ENABLED]</term>

          <listitem>
            <para>This returns 1 if the subscription is enabled (e.g. the
            payment processor already notified us that the transaction is
            valid and it's not a renewal for a future date) or 0 if it's not
            enabled yet.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[SUB:PROCESSOR]</term>

          <listitem>
            <para>The name of the payment processor plugin, e.g. "paypal" for
            the PayPal payment plugin</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[SUB:PROCESSOR_KEY]</term>

          <listitem>
            <para>The unique transaction ID assigned by the payment processor.
            IMPORTANT! This may NOT be available if the payment processor has
            not contacted your site with the result of the transaction before
            redirecting the user back to your site.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[SUB:STATE]</term>

          <listitem>
            <para>The payment state. C means completed, P is pending, X is
            cancelled, N means it hasn't been processed yet. IMPORTANT! This
            may NOT be available if the payment processor has not contacted
            your site with the result of the transaction before redirecting
            the user back to your site.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[SUB:NET_AMOUNT]</term>

          <listitem>
            <para>The amount the user paid, before taxes.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[SUB:TAX_AMOUNT]</term>

          <listitem>
            <para>The amount of taxes that the user paid.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[SUB:GROSS_AMOUNT]</term>

          <listitem>
            <para>The total amount the user paid, including taxes.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[SUB:CREATED_ON]</term>

          <listitem>
            <para>The exact date and time the user pressed the Subscribe Now
            button in YYYY-MM-DD hh:mm:ss format.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[SUB:AKEEBASUBS_COUPON_ID]</term>

          <listitem>
            <para>The numeric ID of the coupon used during the subscription,
            or 0 if no coupon was used</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[SUB:AKEEBASUBS_UPGRADE_ID]</term>

          <listitem>
            <para>The numeric ID of the upgrade rule automatically applied to
            the subscription, or 0 if no upgrade rule was used</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[SUB:AKEEBASUBS_AFFILIATE_ID]</term>

          <listitem>
            <para>The numeric ID of the affiliate who referred this
            subscription, or 0 if no affiliate was used</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[SUB:PREDISCOUNT_AMOUNT]</term>

          <listitem>
            <para>The price of the subscription, before any coupon or upgrade
            rule discount was applied</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[SUB:DISCOUNT_AMOUNT]</term>

          <listitem>
            <para>The exact discount amount (coupon, upgrade rule) applied to
            the subscription</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[USER:ISBUSINESS]</term>

          <listitem>
            <para>1 if the user chose to perform a business registration, 0
            otherwise</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[USER:BUSINESSNAME]</term>

          <listitem>
            <para>The business name</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[USER:OCCUPATION]</term>

          <listitem>
            <para>The business occupation specified</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[USER:VATNUMBER]</term>

          <listitem>
            <para>The VAT registration number</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[USER:VIESREGISTERED]</term>

          <listitem>
            <para>1 if the VAT number is VIES-registered</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[USER:ADDRESS1]</term>

          <listitem>
            <para>The address field (part 1)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[USER:ADDRESS2]</term>

          <listitem>
            <para>The address field (part 2)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[USER:CITY]</term>

          <listitem>
            <para>City</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[USER:STATE]</term>

          <listitem>
            <para>State (two letter code); only exists for Australia, Canada
            and USA</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[USER:ZIP]</term>

          <listitem>
            <para>ZIP/Postal Code</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[USER:COUNTRY]</term>

          <listitem>
            <para>Two-letter ISO code of the selected country, e.g. DE for
            Germany, FR for France, US for USA, CA for Canada and so on</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>[CUSTOM:<replaceable>yourFieldName</replaceable>]</term>

          <listitem>
            <para>Where <replaceable>yourFieldName</replaceable> is the name
            of a custom field in all uppercase letters. Custom fields can be
            defined in plugins. If you have created any custom field plugins,
            you know what this is. If you don't know what this is, you most
            likely don't need it!</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section xml:id="tax-rules">
      <title>Tax Rules</title>

      <para>You can access this feature by clicking on <guilabel>Tax
      Rules</guilabel> in the toolbar links area.</para>

      <para>Out of the box, Akeeba Subscriptions is set up to not apply any
      VAT or other tax at all. However, this is not what most users would
      like. Below we are providing the most common setups based on your
      business type. Our lawyers told us that we have to say this to you:
      Please note that we are not lawyers or tax technicians. As a result, our
      advice is based on our personal experience, may be flawed and in no way
      should be considered a legal or financial advice. Should you chose to
      use it you do so at your own risk. We strongly advise you to ask a
      qualified tax technician, lawyer or other relevant professional
      qualified by law to give you advice regarding tax laws. That said,
      here's the most common tax setups:</para>

      <bridgehead>Extra-EU businesses, e.g. US based</bridgehead>

      <para>Tax Rules determine if the user should be charged a tax amount on
      top of the regular price of the subscription level. If you do not wish
      to charge any taxes (e.g. you have already included any applicable taxes
      in your subscription price), you will still have to create a default
      rule with 0 tax charges. In order to do so, click on the New button,
      select the "- Select -" option in the Country drop-down and set the tax
      rate to 0, then click on Save. Now you have created a catch-all rule
      with 0% tax. Likewise, if you want to charge all users a flat tax rate,
      say 18%, do the same thing, but set the tax rate to your desired
      percentage, in our case 18 (note: without the % sign!) and click on
      Save.</para>

      <bridgehead>Intra-EU businesses with a VIES registered VAT number, or
      extra-EU businesses with an EU VAT number</bridgehead>

      <para>If you are a business based in the European Union with a
      VIES-registered VAT number you have to create a total of 30 rules to
      conform to the overcomplicated EU tax regulations. First, create a
      default rule with 0% tax as noted above. Then do the same thing, but set
      the <guilabel>VIES Reg</guilabel> option to Yes and the tax rate to 0%.
      Now create new tax rules for each one of these countries, <guilabel>VIES
      Reg</guilabel> set to No and tax rate set to your local VAT tax rate
      (e.g. 23% for Greece): Austria, Belgium, Bulgaria, Cyprus, Czech
      Republic, Germany, Greece, Denmark, Estonia, Finland, France, Hungary,
      Ireland, Italy, Latvia, Lithuania, Luxembourg, Malta, Netherlands,
      Poland, Portugal, Romania, Slovakia, Slovenia, Spain, Sweden, United
      Kingdom. For the country of your business (e.g. Greece for a
      Greece-based business) create on more rule with <guilabel>VIES
      Reg</guilabel> set to Yes and the tax rate set to your local VAT tax
      rate (e.g. 23% for Greece). This way, the following happens:</para>

      <itemizedlist>
        <listitem>
          <para>If the customer is extra-EU he will be charged no VAT</para>
        </listitem>

        <listitem>
          <para>If the customer is an intra-EU business, he will be charged no
          VAT (he's liable to VAT on his local tax authorities, not your
          country's tax authorities)</para>
        </listitem>

        <listitem>
          <para>If the customer is intra-EU, but not a business with a
          VIES-registered VAT number, he's paying VAT.</para>
        </listitem>

        <listitem>
          <para>If the customer is from your own country, you are charging him
          with VAT no matter what.</para>
        </listitem>
      </itemizedlist>

      <para>Do note that the same setup is required if you are an extra-EU
      business –e.g. US-based– with an EU VAT ID (it's in the format
      EU012345678). In this case, you have no EU country of residence, so you
      can skip the last tax rule mentioned above.</para>

      <bridgehead>Intra-EU businesses without a VIES-registered VAT
      number</bridgehead>

      <para>Please ask your lawyer whether it's legal for you to sell
      subscriptions to residents of a country other than yours. There is a gap
      in the EU directives regarding that case, therefore we can't provide you
      with even semi-accurate tax setup information within any stretch of
      imagination.</para>

      <bridgehead>Tax Rule options</bridgehead>

      <para>Each tax rule has the following options:</para>

      <variablelist>
        <varlistentry>
          <term>Country</term>

          <listitem>
            <para>Which country this tax rule is applicable in. If empty (the
            "- Select -" pseudo-option of the country list) it applies to all
            countries.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>State</term>

          <listitem>
            <para>Which state this tax rule is applicable in. Note: only US
            and Canada states and provinces can be selected. If left empty
            (the N/A option) it applies to all states.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>City</term>

          <listitem>
            <para>Which city this tax rule is applicable in. Do note that the
            spelling of the city must match, but it's case insensitive. This
            means that <option>new york</option>, <option>NEW YORK</option>
            and <option>New York</option> are equivalent. Leave blank to match
            all cities.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>VIES Reg</term>

          <listitem>
            <para>If set to Yes, the tax rule matches only those clients with
            a valid, VIES registered EU VAT number. If you don't know what
            VIES registration is, <link
            xlink:href="http://ec.europa.eu/taxation_customs/taxation/vat/traders/vat_number/index_en.htm">read
            this</link>. You can verify if a VAT number of an EU resident or
            EU registered business is also VIES registered through EU's <link
            xlink:href="http://ec.europa.eu/taxation_customs/vies/">official
            web application on Europa.eu</link>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Tax Rate</term>

          <listitem>
            <para>The tax rate percentage. If you need to enter decimal
            digits, use a dot not a comma. For example, <option>17.5</option>
            is valid, <option>17,5</option> is INVALID. Do NOT type the
            percentage sign. For example, <option>23</option> is valid,
            <option>23%</option> is INVALID. The percentage is always implied,
            that's why it's printed after the field's contents.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Enabled</term>

          <listitem>
            <para>If set to Yes, the VAT Rule will be applied, otherwise it
            will be ignored (as if it weren't set at all)</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section xml:id="upgrade-rules">
      <title>Upgrade Rules</title>

      <para>You can access this feature by clicking on
      <guilabel>Upgrades</guilabel> in the toolbar links area.</para>

      <para>This feature allows you to create automatically applied discount
      rules to reward your loyal customers by giving them a discount. If you
      are not sure this is what you want to do, I strongly suggest reading
      Seth Godin's "<link
      xlink:href="http://sethgodin.typepad.com/seths_blog/2011/02/how-should-you-treat-your-best-customers.html">How
      should you treat your best customers?</link>" and view <link
      xlink:href="http://www.attorneymarketing.com/2010/04/25/seth-godin-explains-how-to-build-a-tribe-of-loyal-clients/">this
      video of his</link> where he explains his ideas on small businesses even
      more clearly.</para>

      <para>Each Upgrade rule has the following options:</para>

      <variablelist>
        <varlistentry>
          <term>Title</term>

          <listitem>
            <para>Just a title to remind you of what this upgrade rule
            does</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Published</term>

          <listitem>
            <para>If set to No, it won't be taken into account during a new
            subscription's price calculation</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>From level</term>

          <listitem>
            <para>The subscription level for which the user must already have
            a valid subscription in order for the upgrade rule to take
            effect</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>To Level</term>

          <listitem>
            <para>The subscription level which the user is currently trying to
            subscribe to and onto which the discount will be applied</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Min. Presence</term>

          <listitem>
            <para>The minimum number of days the user has to have a valid
            subscription to From Level for this rule to be applied</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Max. Presence</term>

          <listitem>
            <para>The maximum number of days the user has to have a valid
            subscription to From Level for this rule to be applied</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Discount Type</term>

          <listitem>
            <para>If it's Value, the Value field contains currency, e.g. if
            you're using Euros and type a value of 20 then 20 Euros will be
            subtracted from the price. If its Percent, then the Value field
            contains a percentage, e.g. if you type a value of 20 then a 20%
            discount will be applied to the price.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Value</term>

          <listitem>
            <para>See above.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Practical examples of upgrade rules:</para>

      <para>You want to give a 30% discount to users with a SUB1 annual
      subscription if they renew up to 30 days before their subscription
      expiration. Both levels set to SUB1, min presence is set to 0, max
      presence is set to 335 (one year is 365 days, minus 30 days, equals 335
      days), discount type Percent, value 30.</para>

      <para>You want to give a 15% discount to users with a SUB1 annual
      subscription if they renew during the last 30 days of their
      subscription. Both levels set to SUB1, min presence is set to 335 (one
      year is 365 days, minus 30 days, equals 335 days), max presence set to
      365 (one full year) discount type Percent, value 15.</para>

      <para>You want to give a 10 Euro discount to users with a SUB1 annual
      subscription who are now buying a SUB2 subscription. From Level set to
      SUB1, To Level set to SUB2, min presence set to 0, max presence set to
      365 (one year), discount set to Value, value set to 10.</para>

      <para>You want users buying both SUB1 and SUB2 to have a 10 Euro
      discount. First, create a rule like in the previous example. Then create
      another rule with From Level set to SUB2, To Level set to SUB1, min
      presence set to 0, max presence set to 365, discount set to Value, value
      set to 10. This way, whichever subscription they buy first, they'll get
      the discount when they buy the other subscription as well.</para>

      <para>You want to give a complimentary (free) SUB3 subscription to users
      who have already bought SUB1 and SUB2: you can't do that with Upgrade
      Rules, as you cannot combine multiple subscriptions in a single rule.
      Instead, use a coupon code with 100% discount and show this coupon code
      only to subscribers who have already bought a SUB1 and SUB2 subscription
      using the Restricted Content plugin bundled with Akeeba
      Subscriptions.</para>
    </section>

    <section xml:id="coupons">
      <title>Coupons</title>

      <para>You can access this feature by clicking on
      <guilabel>Coupons</guilabel> in the toolbar links area.</para>

      <para>This feature allows you to create discount coupon codes. When a
      user enters a valid coupon code during registration, it's subtracted
      from the price of his subscription. You can let coupons work on specific
      subscriptions, specific users, for a predefined time period or even for
      a predefined number of times before becoming inactive. You can even
      create 100% discount coupons for giveaways or other similar promotional
      reasons.</para>

      <note>
        <para>You can not publish/unpublish coupons. A coupon will be
        automatically published when the current date is between its Valid
        From / Valid To dates. Likewise, a coupon will be automatically
        unpublished when the current date is outside its Valid From / Valid To
        dates. In order to unpublish a coupon set its Valid To date in the
        past and it will be automatically unpublished.</para>
      </note>

      <para>Each coupon supports the following fields:</para>

      <variablelist>
        <varlistentry>
          <term>Title</term>

          <listitem>
            <para>A descriptive title for your coupon. It is only displayed to
            you, it is not displayed to your users.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Coupon code</term>

          <listitem>
            <para>The coupon code which the user has to enter in order to
            receive the discount. Very important: coupon codes are case
            insensitive, therefore it's best to type them in all capital
            letters. Moreover, we suggest using only capital Latin letters
            without accents or diacretics and numbers, so that all users can
            type them in using their keyboard.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Discount type</term>

          <listitem>
            <para>You can either specify Percent (give an X% discount over the
            price) or Value (deducts X from the price). It works in
            conjunction with the Value field below. For example, if you are
            using Euros as your currency, you set Value here and type in a
            value of 10, the coupon gives 10 Euro discount.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Discount value</term>

          <listitem>
            <para>See above</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Published</term>

          <listitem>
            <para>Set to Yes for the coupon to become active</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Hits</term>

          <listitem>
            <para>This is the number of times this coupon has been
            used.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Valid from</term>

          <listitem>
            <para>When the coupon will become active (note: the date is
            expressed in the GMT/UTC timezone). Leave blank and it will be
            adjusted automatically.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Valid to</term>

          <listitem>
            <para>When the coupon will become inactive (note: the date is
            expressed in the GMT/UTC timezone). Leave blank and it will be
            adjusted automatically.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Limit to a specific user</term>

          <listitem>
            <para>Click on <guibutton>Select</guibutton> to pick a user for
            which the coupon will be active. For all other users the coupon
            will have no effect. Leave blank to let all users –even new ones–
            to use the coupon.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Subscription Levels</term>

          <listitem>
            <para>Choose the subscription levels which the coupon code can be
            applied to. Leave it blank (or make sure that only the <option>-
            Select -</option> pseudo-option is selected) to let Akeeba
            Subscriptions apply the coupon to all current and future
            subscription levels you are offering on your site.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Hits limit</term>

          <listitem>
            <para>If it is greater than zero, the coupon can be used up to
            this number of times before it becomes inactive. In other words,
            when the Hits counter becomes equal to Hits Limit, the coupon can
            no longer be used by anyone. Leave it blank to not apply any such
            limit.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section xml:id="subscriptions-management">
      <title>Subscriptions management</title>

      <para>You can access this feature by clicking on
      <guilabel>Subscriptions</guilabel> in the toolbar links area.</para>

      <para>This is a standard Joomla! administrator page which needs no
      explanation.</para>

      <para>The icons on the left hand side of the user information are
      Gravatars. If the user has linked a Gravatar to their email address, it
      is displayed next to their name, otherwise a default avatar (head-shaped
      cut out) is displayed.</para>

      <para>In order to edit a subscription, click on the leftmost column (the
      numeric ID) of the subscription record. Clicking on the other links will
      edit the respective item, i.e. clicking on the subscription level will
      open the subscription level editor.</para>

      <para>The available columns (and the respective filters on each column)
      are:</para>

      <variablelist>
        <varlistentry>
          <term>ID</term>

          <listitem>
            <para>The subscription ID. Clicking on an ID will open the
            subscription for editing.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Level</term>

          <listitem>
            <para>The subscription level of this particular subscriptions.
            Click on a subscription level to open the subscription level's
            editor page. You can use the dropdown to filter the view by a
            particular subscription.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>User</term>

          <listitem>
            <para>Displays the user information of this subscription. Typing
            in the search box will search for whatever you typed in the
            username, full name and email address of the user. Partial matches
            will also be returned, e.g. searching for "car" will also match
            "Carlos", "Descartes" and, of course, "Car".</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Payment / Discount</term>

          <listitem>
            <para>The payment column can be a dollar icon (successful
            payment), dollar icon with an exclamation mark (the payment is
            being processed), dollar icon with a star (the user was taken to
            the payment processor but we don't have any news if the payment
            worked) or a dollar icon in a red circle (payment was cancelled,
            reversed or failed).</para>

            <para>The discount column will tell you if a discount was used and
            what type of discount. A dollar card followed by green bold text
            means that a coupon was used; the green text is the coupon's code.
            A magician's hat followed by brown text indicates that an Upgrade
            Rule was used; the brown text is the title of the upgrade rule
            used.</para>

            <para>You have four available filters:</para>

            <itemizedlist>
              <listitem>
                <para>The State dropdown allows you to filter by payment
                state, e.g. Completed will only show the subscriptions which
                are paid for</para>
              </listitem>

              <listitem>
                <para>The first text box allows you to filter by the Payment
                Processor Key of each subscription. This is useful when you
                have, for example, they Transaction # of a PayPal payment and
                you want to find the subscription it refers to; just paste it
                to this box and press ENTER on your keyboard!</para>
              </listitem>

              <listitem>
                <para>The Discount dropdown allows you to filter by the
                discount type which was used on that subscription</para>
              </listitem>

              <listitem>
                <para>The second textbox allows you to filter by coupon code
                or upgrade rule title.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Amount</term>

          <listitem>
            <para>Displays the breakdown of the amount paid by the user. The
            first line displays the net value, before any discount or taxes
            and is displayed in green letters if and only if the subscription
            cost money (it's not a zero-priced subscription). The second line
            is the discount amount and appears in red letters and a negative
            sign prefix if and only if there was a discount applied to the
            subscription. The third line is the tax amount and appears in
            brown, italic letters if and only if a tax amount (as determined
            by a tax rule) was applied. Finally, the bigger, black, bold
            letters indicate the amount paid by the user.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Valid From / Valid To</term>

          <listitem>
            <para>Shows the validity period of a subscription. The Valid From
            date is displayed left aligned in black type. The Valid To date is
            displayed right aligned in red type.</para>

            <para>You have two date pickers you can use to filter your
            subscriptions. The first one is the From and the second one is the
            To picker. You can have the following combinations:</para>

            <itemizedlist>
              <listitem>
                <para>Date entered in From, nothing in To. Shows subscriptions
                with a Valid From date AFTER the one you entered.</para>
              </listitem>

              <listitem>
                <para>Date entered in To, nothing in From. Shows subscriptions
                with a Valid To date BEFORE the one you entered.</para>
              </listitem>

              <listitem>
                <para>Date entered in From and To. Shows subscriptions with a
                Valid From date BETWEEN the two entered dates. The Valid To
                date can be anything. This is a bit unintuitive!</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Created On</term>

          <listitem>
            <para>When the subscription was created. Entering a date in the
            date picker allows you to filter the display showing subscriptions
            which were created AFTER the entered date.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Published</term>

          <listitem>
            <para>Is the subscription active?</para>

            <important>
              <para>Clicking on the Published column apparently has no effect.
              This is not a bug; it's the expected behaviour. The publish
              status of each subscriptions is defined by the payment state and
              the valid from/ to dates. If the payment state is marked as
              "Completed" then the subscription is forced to be active within
              the time period defined by the valid from / to columns. If you
              want to disable a paid subscription, set its payment state to
              cancelled and unpublish it.</para>
            </important>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>You can use the <guibutton>Run Integrations</guibutton> button any
      time in order to have Akeeba Subscriptions re-process all integrations
      with third party components. This is useful when you suspect an
      integration has gone wrong, you changed the options in an integration
      plugin or you just imported a large number of subscriptions.</para>

      <para>Using the <guibutton>Export to CSV</guibutton> button allows you
      to export the current view into a CSV file for further processing in a
      spreadsheet application such as Microsoft Office Excel, Apple Numbers or
      OpenOffice.org Calc. Do note that the full set of raw data is dumped to
      the CSV file. What we mean is that the filters are applied, but instead
      of exporting just one page of data (what is displayed on your screen) it
      will export all pages of data.</para>
    </section>

    <section xml:id="affiliates">
      <title>Affiliates management</title>

      <para>Since Akeeba Subscriptions 2.0.b1 there is a very basic affiliate
      management system. It is extremely (even stupidly!) simple by design. If
      you want something more complex, you can easily integrate Akeeba
      Subscriptions with a web-based affiliate management system, like OSI
      Affiliates.</para>

      <para>The concept of affiliates in Akeeba Subscriptions is based on some
      simple rules:</para>

      <itemizedlist>
        <listitem>
          <para>You manually create affiliates in the back-end of the
          component</para>
        </listitem>

        <listitem>
          <para>Each affiliate is linked to a Joomla! user account and is
          assigned a commission percentage</para>
        </listitem>

        <listitem>
          <para>When you pay your affiliate, you manually create an affiliate
          payment record to let Akeeba Subscriptions know how much you paid
          him and when</para>
        </listitem>

        <listitem>
          <para>Each subscription with a payment status of C (Completed)
          counts towards the amount owed to the affiliate</para>
        </listitem>

        <listitem>
          <para>Each affiliate payment deducts from the amount owed to the
          affiliate</para>
        </listitem>

        <listitem>
          <para>There is no "affiliate report" page of any kind</para>
        </listitem>
      </itemizedlist>

      <para>It's an extremely simple system, suitable for small sites with a
      handful of trusted affiliates. If you're interested in integrating a
      much more powerful third party affiliate system, please contact our
      support.</para>

      <bridgehead>How to use affiliates?</bridgehead>

      <para>Each affiliate has a unique numeric Affiliate ID. You can see that
      in the left-hand column in the affiliates management page. For our
      example, we'll assume that our affiliate has an ID of 123.</para>

      <para>In order for a sale to be registered to that affiliate, you need
      to redirect the prospective buyer to the subscription levels list page,
      having appended the <uri>affid=<replaceable>123</replaceable></uri> URL
      parameter at the end of the URL. For example, if your subscription level
      list page's URL is <uri>http://www.example.com/subscribe.html</uri> and
      your Affiliate ID is 123 then all visitors must visit the URL
      <uri>http://www.example.com/subscribe.html?affid=123</uri> for the sale
      to be registered to the affiliate. If you're not using SEF URLs with
      Joomla!, the URL would be something like
      <uri>http://www.example.com/index.php?option=com_akeebasubs&amp;view=levels&amp;affid=123</uri>
      instead.</para>

      <para>The prospective buyer is free to wander off to other pages of your
      site freely before coming buying his subscription. The affiliate ID is
      stored in the user's session. As long as he has activated cookies on his
      browser (it's on by default on all browsers) then the affiliate ID will
      be "remembered" throughout the user's session.</para>
    </section>

    <section xml:id="frotn-end-items">
      <title>Front-end items</title>

      <para>There are four types of front-end menu items you can
      create:</para>

      <variablelist>
        <varlistentry>
          <term>Subscribe • Specific Level</term>

          <listitem>
            <para>Allows you to create a menu link to the subscription page of
            a specific Subscription Level</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Subscription Levels • Awesome Layout</term>

          <listitem>
            <para>Presents a list of all available subscription levels in a
            comparison table, using CSS3 styling. It's the most eye-catching
            presentation layout and it's best to use only if you have a small
            number of subscription levels (4 to 5)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Subscription Levels • All Levels</term>

          <listitem>
            <para>Presents a list of all available subscription levels as a
            two column list of boxes. It is a relatively dull presentation
            mode, but is suitable for a very large number of subscription
            levels (over 6)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>My subscriptions • All of my subscriptions</term>

          <listitem>
            <para>Think of it as a kind of "My Account" page. It shows the
            user all of his subscriptions and allows him to review the
            information on each one of them, as well as renew them.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The subscription page defines two module positions where you can
      publish modules to further expand the information presented on the page.
      Publishing modules in the <option>akeebasubscriptionsheader</option>
      position will make them appear at the very top of the page, right above
      the Steps bar. That's a good place to publish information about SSL
      security or banners about your latest special offers. Publishing modules
      in the <option>akeebasubscriptionsfooter</option> position will make
      them appear right after the end of the subscription form. This is a good
      place to put a custom HTML module with links to your terms of service,
      business contact information, etc.</para>

      <para>Additionally, the page which lists the subscriptions defines
      another two module positions where you can publish modules to further
      expand the information presented on the page. Publishing modules in the
      <option>akeebasubscriptionslistheader</option> position will make them
      appear at the very top of the page, right above the list of subscription
      levels. Publishing modules in the
      <option>akeebasubscriptionslistfooter</option> position will make them
      appear right after the end of the subscription levels list.</para>
    </section>

    <section xml:id="importing-from-other-components">
      <title>Importing from other components</title>

      <para>Most likely you are already using a subscriptions system and
      wouldn't like to have to manually import all of your subscriptions to
      Akeeba Subscriptions. That's why we are offering an automated import
      feature. You can access it from Akeeba Subscription's dashboard page, by
      clicking on the Operations tab, and then on
      <guibutton>Import</guibutton>.</para>

      <warning>
        <para>Importing from other components will DELETE AND REPLACE ANY AND
        ALL EXISTING DATA IN AKEEBA SUBSCRIPTIONS. There is NO TURNING BACK.
        Do NOT use this option after you have been using Akeeba Subscriptions
        and have new subscribers on your site.</para>
      </warning>

      <important>
        <para>Please remember to review your Subscription Levels after import.
        Most notably, the text of the subscription completion and subscription
        cancellation pages will be missing from all subscription
        levels.</para>
      </important>

      <para>The options are:</para>

      <variablelist>
        <varlistentry>
          <term>AMBRA.Subscriptions</term>

          <listitem>
            <para>Imports subscription levels and subscriptions from
            Dioscouri's AMBRA Subscriptions (a.k.a. AMBRA.subs)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>AMBRA.Subscriptions with PayPal with VAT plugin</term>

          <listitem>
            <para>If you are using AMBRA.subs with my modified "PayPal with
            VAT" payment plugin and the customizations for integrating coupons
            into AMBRA.subs, you can click on this option. It will import
            subscription levels, subscriptions and any coupon codes defined.
            Moreover, it will also import the extra data stored per user, e.g.
            their address and VAT number.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </chapter>

  <chapter xml:id="plugins">
    <title>Payment methods, integrations and plugins</title>

    <para>Akeeba Subscriptions is designed to be a modular system, powered by
    standard Joomla! plugins. Using plugins you can add payment methods as
    well as integration with third party software. Moreover, core
    functionality of Akeeba Subscriptions (like sending out emails upon
    subscription or email reminders for subscription expiration) is take care
    of by plugins. This documentation chapter will guide you through the
    details of each plugin.</para>

    <section xml:id="payment-plugins">
      <title>Payment methods</title>

      <para>All payment methods are standard Joomla! plugins, belonging to the
      <option>akpayment</option> group. If you want to enable a payment
      method, just publish the relevant plugin.</para>

      <section xml:id="payment-paypal">
        <title>Paypal</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions Payment - Paypal</guilabel></para>

        <para>This payment method integrates the standard PayPal Website
        Payments service, available without any setup fee to all verified
        PayPal clients. In other words, that's the standard way to use PayPal
        as your payment processor. The options you have in this plugin
        are:</para>

        <variablelist>
          <varlistentry>
            <term>Payment option title</term>

            <listitem>
              <para>Leave blank to use "PayPal" or type in a custom name to
              show to your customer's, e.g. "PayPal, bank account or Credit
              Card"</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Merchant ID</term>

            <listitem>
              <para>Your PayPal email address or your secure merchant ID (if
              PayPal has assigned you with one)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Secure POST</term>

            <listitem>
              <para>If enabled, the verification postback to PayPal will be
              over an SSL connection. In order for this to work, your host
              needs to support SSL connections using cURL to PayPal's IP
              address block.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Sandbox</term>

            <listitem>
              <para>When enabled, transactions are processed by PayPal
              Sandbox, i.e. PayPal's testing mode. This is designed for
              integration tests, BEFORE going live with your site. <emphasis
              role="bold">NEVER, EVER, NO MATTER WHAT YOU DO, SHOULD YOU NOT
              ENABLE THIS ON PRODUCTION SITES! IF YOU DO, YOU WILL LOSE MONEY
              AND/OR CUSTOMERS.</emphasis></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Sandbox merchant</term>

            <listitem>
              <para>The dummy merchant email used with PayPal's
              Sandbox.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>PayPal Callback Text</term>

            <listitem>
              <para>(optional) Normally, when the user completes the payment,
              PayPal shows him a button with the default label "Return to
              Merchant". If you type in something in here, it will be shown on
              that button instead of the default label. For example, you can
              type in something like "Return to Example.com"</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Custom Header Image</term>

            <listitem>
              <para>(optional) The URL to an image to be shown on PayPal's
              checkout page header. It'd better be hosted on an HTTPS URL,
              otherwise your customers will get a warning about insecure
              content on their browser.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Header Background Color</term>

            <listitem>
              <para>The hex code of PayPal checkout page's header background
              color. For example, white is FFFFFF (note: there is no # sign in
              front of the hex color code!)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Header Border Color</term>

            <listitem>
              <para>The hex code of PayPal checkout page's header border
              color. For example, light gray is CCCCCC (note: there is no #
              sign in front of the hex color code!)</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="payment-none">
        <title>None</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions Payment - None</guilabel></para>

        <para>This is a dummy payment plugin which immediately activates a
        subscription without payment.</para>

        <warning>
          <para>DO NOT USE THIS ON PRODUCTION SITES. IT IS MEANT FOR TESTING
          PURPOSES ONLY. ENABLING IT ON A PRODUCTION SITE ALLOWS ANYONE,
          INCLUDING UNREGISTERED USERS, TO SUBSCRIBE TO ANY SUBSCRIPTION THEY
          WANT <emphasis role="bold">WITHOUT PAYING ANYTHING AT
          ALL</emphasis>. You have been strongly warned.</para>
        </warning>
      </section>

      <section xml:id="payment-worldpay">
        <title>WorldPay</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions Payment - WorldPay</guilabel></para>

        <para>This payment method integrates the WorldPay Hosted Payment Page
        payments service, available with all entry-level offerings of
        WorldPay.</para>

        <important>
          <para>WorldPay's Hosted Payment Page mode does not allow your
          visitors to come back to your site. Therefore, they will not see
          your custom payment success and cancellation messages. You will
          instead have to use custom HTML pages uploaded to WorldPay's
          servers.</para>
        </important>

        <warning>
          <para>You need to perform some setup before using this method (the
          following steps are taken verbatim from WorldPay's Test and Go Live
          documentation):</para>

          <itemizedlist>
            <listitem>
              <para>Log in to the WorldPay Merchant Interface</para>
            </listitem>

            <listitem>
              <para>Select Installations from the left hand navigation</para>
            </listitem>

            <listitem>
              <para>Choose an installation and select the Integration Setup
              button for either the TEST or PRODUCTION environment</para>
            </listitem>

            <listitem>
              <para>Check the Enable Payment Response checkbox</para>
            </listitem>

            <listitem>
              <para>Enter the WPDISPLAY ITEM tag which includes the dynamic
              url variable into the Payment Response URL input field:</para>

              <para>&lt;wpdisplay item=MC_callback&gt;</para>
            </listitem>

            <listitem>
              <para>Enter a password into the Payment Response Password input
              field; this is your Callback Password and you will have to copy
              it to the plugin's setup parameters</para>
            </listitem>

            <listitem>
              <para>Select the Save Changes button</para>
            </listitem>
          </itemizedlist>
        </warning>

        <para>Please make sure that you have completed all of the steps above
        and have configured all the parameters BEFORE enabling this plugin. Do
        not ask for support if you haven't done that yet.</para>

        <para>The options you have in this plugin are:</para>

        <variablelist>
          <varlistentry>
            <term>Payment option title</term>

            <listitem>
              <para>Leave blank to use "WorldPay" or type in a custom name to
              show to your customer's, e.g. "Visa, MasterCard or American
              Express cards"</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Installation ID</term>

            <listitem>
              <para>Your WorldPay installation ID, as communicated to you by
              WorldPay.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Callback Password</term>

            <listitem>
              <para>The callback password you have specified in your WorldPay
              account, used to verify that the payment notification come,
              indeed, from WorldPay and avoid fraudulent requests</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Test mode</term>

            <listitem>
              <para>When enabled, transactions are processed by WorldPay's
              test server, i.e. WorldPay's testing mode. This is designed for
              integration tests, BEFORE going live with your site. <emphasis
              role="bold">NEVER, EVER, NO MATTER WHAT YOU DO, SHOULD YOU NOT
              ENABLE THIS ON PRODUCTION SITES! IF YOU DO, YOU WILL LOSE MONEY
              AND/OR CUSTOMERS.</emphasis> This option should be used only in
              the integration testing phase during your initial setup. During
              this phase, visitors can use one of the dummy card numbers to
              buy subscriptions without money changing hands. When you're
              ready to go live with your site, disable this feature.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="payment-offline">
        <title>Off-line</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions Payment - Off-line</guilabel></para>

        <para>This is a payment plugin which lets your users complete their
        payment off-line, e.g. through bank (wire) transfer, money check,
        Western Union or any other means of payment that you allow. It works
        very simply: it just presents your user with a customizable
        instructions message. In that message you can use the variables
        <replaceable>{SUBSCRIPTION}</replaceable> to display the subscription
        ID and <replaceable>{AMOUNT}</replaceable> to display the amount due.
        You can also use <replaceable>{FIRSTNAME}</replaceable> and
        <replaceable>{LASTNAME}</replaceable> for the user's first and last
        name, respectively. Please use all caps for these variables and
        include the curly braces.</para>

        <tip>
          <para>The text in this field is HTML code. If you want to add
          linebreaks, just add a &lt;br/&gt; tag. Of course you can use any
          kind of HTML markup you wish, such as &lt;b&gt; for bold text, or
          even embed a Flash file (even though I can't possibly think
          <emphasis>why</emphasis> you'd want to do <emphasis>that</emphasis>)
          as long as it's allowed by your Joomla! version and preferences.
          It's safe to assume that basic HTML like &lt;p&gt;, &lt;em&gt;,
          &lt;b&gt; and &lt;a&gt; tags will work.</para>
        </tip>

        <para>Once the user effects the payment, simply go to your
        Subscriptions view, enable his subscriptions and set the payment
        status to "Completed". That's all!</para>
      </section>

      <section xml:id="payment-2checkout">
        <title>2Checkout Standard Purchase Routine</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions Payment - 2Checkout Standard Purchase
        Routine</guilabel></para>

        <para>This payment method integrates the 2Checkout Standard Purchase
        Routine payments service (commonly simply referred to as 2checkout or
        2CO).</para>

        <important>
          <para>Akeeba Subscriptions cannot pass the currency to 2Checkout.
          You MUST make sure that the currency configured in 2Checkout and the
          currency displayed in your site match to avoid nasty
          surprises.</para>
        </important>

        <para>The options you have in this plugin are:</para>

        <variablelist>
          <varlistentry>
            <term>Payment option title</term>

            <listitem>
              <para>Leave blank to use "2Checkout" or type in a custom name to
              show to your customer's, e.g. "Visa, MasterCard or American
              Express cards"</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Seller ID</term>

            <listitem>
              <para>Your 2Checkout seller numeric ID, as communicated to you
              by 2Checkout.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Secret word</term>

            <listitem>
              <para>The secret word you have specified in your 2Checkout
              account, used to verify that the payment notification come,
              indeed, from 2Checkout and avoid fraudulent requests. It is case
              sensitive, i.e. ABC, abc and Abc are three different secret
              words.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Demo mode</term>

            <listitem>
              <para>When enabled, transactions are processed by 2Checkout's as
              test payments. This is designed for integration tests, BEFORE
              going live with your site. <emphasis role="bold">NEVER, EVER, NO
              MATTER WHAT YOU DO, SHOULD YOU NOT ENABLE THIS ON PRODUCTION
              SITES! IF YOU DO, YOU WILL LOSE MONEY AND/OR
              CUSTOMERS.</emphasis> This option should be used only in the
              integration testing phase during your initial setup. When you're
              ready to go live with your site, disable this feature.</para>

              <warning>
                <para>NONE of the Demo payments will be accepted by the
                plugin! Demo payments deliberately carry an invalid signature
                and will be marked as "Cancelled" in Akeeba Subscriptions. The
                log file will mention them as fraud attempts. This is
                deliberate and should not be considered a bug.</para>
              </warning>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="payment-ccavenue">
        <title>ccAvenue</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions Payment - ccAvenue</guilabel></para>

        <para>This payment method integrates the ccAvenue payments service,
        the leading payment processor in India. It can be used for
        transactions in Indian Rupees or US Dollars.</para>

        <important>
          <para>Akeeba Subscriptions cannot pass the currency to ccAvenue. You
          MUST make sure that the currency configured in ccAvenue and the
          currency displayed in your site match to avoid nasty
          surprises.</para>
        </important>

        <para>The options you have in this plugin are:</para>

        <variablelist>
          <varlistentry>
            <term>Payment option title</term>

            <listitem>
              <para>Leave blank to use "ccAvenue" or type in a custom name to
              show to your customer's, e.g. "Visa, MasterCard or American
              Express cards"</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Merchant ID</term>

            <listitem>
              <para>Your ccAvenue Merchant ID, as communicated to you by
              ccAvenue.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Working Key</term>

            <listitem>
              <para>The password you have specified in your ccAvenue account,
              used to verify that the payment notification come, indeed, from
              ccAvenue and avoid fraudulent requests. It is case sensitive,
              i.e. ABC, abc and Abc are three different secret words.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="payment-eway">
        <title>eWay</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions Payment - eWay</guilabel></para>

        <para>This payment method integrates the eWay payments service. It can
        work with all three local payment services offered by eWay (Australia,
        New Zealand and UK/Europe).</para>

        <important>
          <para>Each local eWay payment service supports different currencies.
          The Australian service only supports AUD, the New Zealand service
          only supports NZD and the UK service only supports GBP and EUR - as
          far as I can see. You have to make sure you have signed up to the
          correct payment service and set up the currency in Akeeba
          Subscriptions accordingly.</para>
        </important>

        <para>The options you have with this plugin are:</para>

        <variablelist>
          <varlistentry>
            <term>Payment option title</term>

            <listitem>
              <para>Leave blank to use "eWay" or type in a custom name to show
              to your customer's, e.g. "Credit Card"</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>eWay Site</term>

            <listitem>
              <para>Select which local eWay site you are signed up with.
              IMPORTANT! If this selection is incorrect, you will get an error
              when you try to subscribe.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>eWay Customer ID</term>

            <listitem>
              <para>Enter your numeric eWay Customer ID. Use 87654321 for
              testing.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>eWay Username</term>

            <listitem>
              <para>Enter your eWay username. Use TestAccount for
              testing.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Company logo URL</term>

            <listitem>
              <para>Optional. The URL of your logo image. It can be hosted on
              your website but MUST use https. This is the top image block of
              the payment web page and it is restricted to 960x65 pixels. A
              default secure image will be used if you leave this field
              empty.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Page banner URL</term>

            <listitem>
              <para>Optional. The URL of the payment page's banner. It can be
              hosted on your website but MUST use https. This is the second
              image block of the payment web page and it is restricted to
              960x65 pixels. A default secure image will be used if you leave
              this field empty.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Language</term>

            <listitem>
              <para>This automatically translates headings and button text to
              the desired language. The default is English.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Company name</term>

            <listitem>
              <para>Optional. This will be displayed as the company is
              purchasing from. Including this is highly recommended.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Page title</term>

            <listitem>
              <para>Optional. This value is used to populate the browser's
              title bar at the top of the screen.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Page description</term>

            <listitem>
              <para>Optional. Used as a greeting message to the customer and
              is displayed above the customer's order details.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Page footer</term>

            <listitem>
              <para>Optional. The page footer text can be customised and
              populated below the customer's order details. Useful for contact
              information.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="payment-upay">
        <title>uPay</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions Payment - uPay</guilabel></para>

        <para>This payment method integrates the uPay payments service
        (https://www.upay.co.uk), a popular payment processor in universities
        and colleges.</para>

        <para>The options you have with this plugin are:</para>

        <variablelist>
          <varlistentry>
            <term>Site ID</term>

            <listitem>
              <para>The unique, numeric Site ID given to you by uPay</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Test Mode</term>

            <listitem>
              <para>When enabled, all transactions will be performed against
              the testing server. No money will change hands. This is supposed
              to be used ONLY for testing the integration with uPay before
              launching your site. As per uPay's documentation, the valid CC
              numbers for testing are:</para>

              <itemizedlist>
                <listitem>
                  <para>Visa: 4222222222222 and 4111111111111111</para>
                </listitem>

                <listitem>
                  <para>MasterCard: 5454545454545454</para>
                </listitem>

                <listitem>
                  <para>Discover: 6011666666666666</para>
                </listitem>
              </itemizedlist>

              <para>You can use any expiry date in the future.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <bridgehead>Integration notes</bridgehead>

        <para>uPay requires you to give them a <guilabel>Posting
        URL</guilabel> before they give you your account's credentials. You
        have to give them the following URL:
        <uri>http://www.example.com/index.php?option=com_akeebasubs&amp;view=callback&amp;paymentmethod=upay</uri>
        where www.example.com must be replaced with the domain name of your
        site.</para>

        <para>uPay will also ask you for a <guilabel>Success Link
        URL</guilabel>, a <guilabel>Cancel Link URL</guilabel> and an
        <guilabel>Error Link URL</guilabel>. These URLs have nothing to do
        with Akeeba Subscriptions. You can use, for example, a link to an
        article for each one of them.</para>
      </section>

      <section xml:id="payment-moip">
        <title>MoIP</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions Payment - MoIP</guilabel></para>

        <para>This payment method integrates the MoIP payments service
        (https://www.moip.com.br), a popular Brazilian payment
        processor.</para>

        <para>The options you have with this plugin are:</para>

        <variablelist>
          <varlistentry>
            <term>Identification</term>

            <listitem>
              <para>Your identification with MoIP. This is your email,
              verified cellphone number or login (username) corresponding to
              your MoIP account.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Sandbox</term>

            <listitem>
              <para>When enabled, all transactions will be performed against
              the testing server. No money will change hands. This is supposed
              to be used ONLY for testing the integration with MoIP before
              launching your site. Please consult MoIP for further
              instructions on using their Sandbox – you have to create special
              Sandbox users to use it!</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <bridgehead>Integration notes</bridgehead>

        <para>You will have to setup an instant payment notification URL in
        your MoIP back-end before Akeeba Subscriptions can handle transactions
        processed by MoIP. In order to do this, go to <guimenu>Meus
        Dados</guimenu>, <guisubmenu>Preferências</guisubmenu>,
        <guimenuitem>Notificação das Transações</guimenuitem> and find the
        <guilabel>Receber notificação instantânea de venda</guilabel> option.
        In there, enter a URL like this:</para>

        <para><uri>http://www.example.com/index.php?option=com_akeebasubs&amp;view=callback&amp;paymentmethod=moip</uri></para>

        <para>where www.example.com must be replaced with the domain name of
        your site.</para>

        <important>
          <para>The developers of Akeeba Subscriptions do not speak
          Portuguese. The above instructions and the Portuguese labels of
          MoIP's interface were kindly provided by MoIP's staff. If you want
          to seek support with us, please place your request in English.
          Otherwise we will have to use Google Translate and we might be lost
          in translation. Thanks!</para>
        </important>
      </section>

      <section xml:id="payment-deltapay">
        <title>DeltaPay (Alpha Bank, Greece)</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions Payment - DeltaPay (Alpha Bank,
        Greece)</guilabel></para>

        <para>This payment method integrates the DelptaPay payment processor
        operated in Greece by Alpha Bank. It implements the HTML method which
        redirects your user to DeltaPay's server where they can enter their
        Credit Card details.</para>

        <warning>
          <para>The DeltaPay system lacks any fraud protection and its
          security model is flaky. It is trivial for an unskilled hacker to
          spoof a payment notification and subscribe without paying. We
          <emphasis role="bold">STRONGLY</emphasis> recommend against using
          it. The only reason we include it is that some of our clients
          requested it.</para>
        </warning>

        <para>The options you have with this plugin are:</para>

        <variablelist>
          <varlistentry>
            <term>Merchant ID</term>

            <listitem>
              <para>When you open a merchant account with Alpha Bank, they'll
              give you a merchant ID. Put it in this field.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <bridgehead>Integration notes</bridgehead>

        <para>You will have to give some URLs to Alpha Bank before going
        live.</para>

        <para>The first one is the "Payment page". Unfortunately, this can not
        be provided, as the referrer page (where the client performs the
        payment from) depends on your menu structure and the subscription
        level your user buys. If they insist, give them this URL:</para>

        <para><uri>http://www.example.com/index.php?option=com_akeebasubs&amp;view=subscribe</uri></para>

        <para>Where www.example.com is the domain name of your site. If this
        doesn't work and ask you to contact your web developer to change the
        payment system, we regret to inform you that this IS NOT AN OPTION.
        Besides, the bank checking the HTTP referer field for "security
        reasons" (as they say in their documentation) is stupid. This HTTP
        field can be forged very easily or even turned off (ref. <link
        xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec15.html">RFC
        2616 ch. 15.1.2 §7</link>) and must not be used for security purposes.
        Moreover, not allowing more than one payment URLs is unheard of in
        this decade. Please ask the bank to fix their system. After all, it's
        YOUR money on the line.</para>

        <para>The other three URLs they require are the Success, Failure and
        Cancel pages. For all of them give them this URL:</para>

        <para><uri>http://www.example.com/index.php?option=com_akeebasubs&amp;view=callback&amp;paymentmethod=deltapay</uri></para>

        <para>where www.example.com must be replaced with the domain name of
        your site.</para>
      </section>

      <section xml:id="payment-googlecheckout">
        <title>Google Checkout</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions Payment - Google Checkout</guilabel></para>

        <para>This payment method integrates the Google Checkout payment
        processor by Google, Inc.</para>

        <para>The options you have with this plugin are:</para>

        <variablelist>
          <varlistentry>
            <term>Merchant ID</term>

            <listitem>
              <para>Your Merchant ID is a unique, numeric code assigned to
              your business by Google. In order to find it:</para>

              <orderedlist>
                <listitem>
                  <para>Sign in to Google Checkout.</para>
                </listitem>

                <listitem>
                  <para>Click the <guilabel>Settings</guilabel> tab.</para>
                </listitem>

                <listitem>
                  <para>Click <guilabel>Integration</guilabel>.</para>
                </listitem>

                <listitem>
                  <para>Your Merchant Key and Merchant ID will appear under
                  <guilabel>Account information</guilabel>.</para>
                </listitem>
              </orderedlist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Merchant Key</term>

            <listitem>
              <para>Your Merchant Key is a unique code that helps secure your
              communications with Google. Both you and Google will use this
              key to authenticate and verify the integrity of any messages you
              exchange.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Sandbox</term>

            <listitem>
              <para>When enabled, all transactions will be performed against
              the testing (sandbox) server. No money will change hands. This
              is supposed to be used ONLY for testing the integration with
              Google Checkout before launching your site. Please consult
              Google for further instructions on using their Sandbox – you
              have to create two special Sandbox users (Sandbox Merchant and
              Sandbox Buyer) to use it.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Sandbox Merchant ID</term>

            <listitem>
              <para>The Merchant ID when using the Sandbox</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Sandbox Merchant Key</term>

            <listitem>
              <para>The Merchant Key when using the Sandbox</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <bridgehead>Integration notes</bridgehead>

        <para>You will have to specify the API callback URL before using
        Google Checkout. To add or edit your API callback URL:</para>

        <orderedlist>
          <listitem>
            <para>Sign in to Google Checkout.</para>
          </listitem>

          <listitem>
            <para>Click the <guilabel>Settings</guilabel> tab.</para>
          </listitem>

          <listitem>
            <para>Click <guilabel>Integration</guilabel>.</para>
          </listitem>

          <listitem>
            <para>Find the <guilabel>API callback URL</guilabel> box and enter
            the following:</para>

            <para><uri>https://www.example.com/index.php?option=com_akeebasubs&amp;view=subscribe</uri></para>

            <para>Where www.example.com is the domain name of your
            site.</para>
          </listitem>

          <listitem>
            <para>Under <guilabel>Callback contents</guilabel>, select
            <option>Notification as XML</option>.</para>
          </listitem>

          <listitem>
            <para>Click <guilabel>Save</guilabel>.</para>
          </listitem>
        </orderedlist>

        <warning>
          <para>Your site MUST support HTTPS and you MUST supply an HTTPS URL
          in the API callback URL field.</para>
        </warning>
      </section>

      <section xml:id="payment-moneris">
        <title>Moneris</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions Payment - Moneris</guilabel></para>

        <para>This payment method integrates the Canadian Moneris (eSelect)
        credit card processing service. Moneris offers is the largest payment
        processor in Canada and offers its services even to non-Canadian
        businesses.</para>

        <important>
          <para>Moneris does not allow us to communicate the transaction
          currency. Please ensure that your prices are displayed in the same
          currency as the one set up in your Moneris account.</para>
        </important>

        <warning>
          <para>Moneris is a Credit Card processor, not a payment gateway.
          This means that your clients will be entering their Credit Card
          information on a page hosted on <emphasis>your </emphasis>site. As a
          result, you MUST use HTTPS for your site so as not to expose your
          clients to any risk of stolen information.</para>

          <para>Akeeba Subscriptions does not record the credit card number,
          expiration date or CVV2 of the Credit Card used by your client,
          therefore PCI compliance of your site is not required.</para>
        </warning>

        <para>The options you have with this plugin are:</para>

        <variablelist>
          <varlistentry>
            <term>Payment option title</term>

            <listitem>
              <para>Leave blank to use "Moneris" or type in a custom name to
              show to your customer's, e.g. "VISA or MasterCard"</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Store ID</term>

            <listitem>
              <para>The Store ID given to you by Moneris. When testing, please
              use one of the test shop names, e.g.
              <option>store1</option></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>API Key</term>

            <listitem>
              <para>The is the API key given to you by Moneris and acts as the
              password authenticating you to Moneris services. When testing,
              please use the API key of the test shop, e.g
              <option>yesguy</option></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Test Mode</term>

            <listitem>
              <para>When enabled, the transactions will be performed against
              Moneris' test server. DO NOT USE THIS ON A LIVE SITE!</para>

              <warning>
                <para>The transaction status depends on the penny value of the
                gross price. You need a gross price with a zero penny value
                (e.g. 1.00 CAD) to get a successful test transaction. Read the
                Moneris integration manual for more information.</para>
              </warning>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>

    <section xml:id="plugins-integration">
      <title>Integration with third party software</title>

      <para>One of the most important aspects about subscription systems is
      their ability to integrate with third party software. A subscription all
      by itself means pretty much nothing. It's just a "flag". The added value
      is when this subscription allows the user holding it to actually do
      something on the site. At this point in time, there are only a handful
      of integrations. If you are interested in more integrations let us know
      and we'll add them to our implementation to-do list.</para>

      <para>All integrations with third party applications are standard
      Joomla! plugins, published in the <option>akeebasubs</option>
      group.</para>

      <section xml:id="integration-cb">
        <title>Community Builder integration</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - Community Builder Integration</guilabel></para>

        <para>This integration plugin allows you to add and remove users from
        Community Builder groups based on their subscription status. Moreover,
        it allows you to automatically authorize subscribers and deauthorize
        them when their subscriptions expires, essentially controlling their
        access to your Community Builder community based on their subscription
        status.</para>

        <para>Please note that this is a smart integration, exactly as
        described in the JUGA plugin in this documentation; instead of adding
        users when a subscription goes active and removing them when a
        subscription goes inactive, Akeeba Subscriptions plugins take a look
        at all of the user's active and inactive subscriptions and decide if
        the user should be added to or removed from Community Builder groups
        or authorized/deauthorized.</para>

        <para>The plugin has these options:</para>

        <variablelist>
          <varlistentry>
            <term>Add to CB groups</term>

            <listitem>
              <para>When enabled, new subscribers are automatically added as
              Community Builder users (a default profile is created for them
              that they can later fill in)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Automatic authorization</term>

            <listitem>
              <para>Select the subscription levels will be automatically
              authorized. When a user has an active subscription to one of
              these levels, he will be marked as an authorized user who has
              read the terms of use in Community Builder, essentially allowing
              her to have access to the Community Builder community on your
              site.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Automatic deauthorization</term>

            <listitem>
              <para>Select the subscription levels will be automatically
              deauthorized. When a user no longer has an active subscription
              to any of these levels, he will be marked as an unauthorized
              user who has not read the terms of use in Community Builder,
              essentially not allowing her to have access to the Community
              Builder community on your site any more.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="integration-ccinvoices">
        <title>ccInvoices integration</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - ccInvoices Integration</guilabel></para>

        <para>This integration allows you to automatically issue and send
        (paid) invoices to your customers once they complete a successful
        registration. When this plugin is enabled, the following will take
        place when a user signs up and his payment is successful:</para>

        <itemizedlist>
          <listitem>
            <para>If he doesn't exist as a ccInvoice contact, a new contact
            will be created for the user.</para>
          </listitem>

          <listitem>
            <para>A new paid invoice is generated with the item description
            reading "Subscription to <replaceable>level title</replaceable>"
            where "level title" is the title of the subscription level the
            user subscribed to.</para>
          </listitem>

          <listitem>
            <para>A PDF of the invoice, based on the default template, is
            generated and emailed to the user</para>
          </listitem>
        </itemizedlist>

        <para>Please note that the default email text in ccInvoices prompts
        the receiver to pay the invoice by the due date. You may want to
        change the wording, as the invoices generated from subscriptions are
        already paid for. You don't want to confuse your customers!</para>

        <para>The plugin has no parameters. If you would like to customise its
        behaviour, please use our forum to post a feature request, describing
        what you have in mind.</para>
      </section>

      <section xml:id="integration-communityacl">
        <title>Community ACL integration</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - Community ACL Integration</guilabel></para>

        <para>This integration plugin allows you to add and remove users from
        Community ACL Groups, Roles and Functions based on their subscription
        status.</para>

        <para>Please note that this is a smart integration, exactly as
        described in the JUGA plugin in this documentation; instead of adding
        users when a subscription goes active and removing them when a
        subscription goes inactive, Akeeba Subscriptions plugins take a look
        at all of the user's active and inactive subscriptions and decide
        which groups the user should be added to or removed from.</para>

        <para>Before we begin taking a look at the plugin options, please note
        that Community ACL defines Groups, Roles and Functions. To make things
        more complicated, a Role can belong to a Group or not and a Function
        can belong to a Rule or not. Are you confused yet? Tell me about it...
        Unfortunately, we have to follow the same inconvenient structure for
        the plugin parameters. Each entry which can be assigned or removed
        from the user's record can therefore consist of a Group, a Group and a
        Role or Group, Role and Function. For example:</para>

        <para><programlisting>My Group</programlisting>defines an entry which
        only mentions a Group. The Role assigned to the user will be the first
        Role which belongs to My Group or, if no roles are specifically
        defined for My Group, the first Role which does not belong to any
        group (usually the default "Subscriber" role created by Community ACL
        during installation). The function assigned to the user will be the
        first function which belongs to the selected Role or, if none is
        defined, the first function which does not belong to any role.</para>

        <programlisting>My Group|My Role</programlisting>

        <para>defines an entry which only mentions a Group and a Role. If
        there is a role named My Role belonging to My Group it will be used.
        Otherwise, we'll try to find a role named My Role which doesn't belong
        to any group whatsoever. If this fails, the Role assigned to the user
        will be the first Role which belongs to My Group or, if no roles are
        specifically defined for My Group, the first Role which does not
        belong to any group (usually the default "Subscriber" role created by
        Community ACL during installation). The function assigned to the user
        will be the first function which belongs to the selected Role or, if
        none is defined, the first function which does not belong to any
        role.</para>

        <para><programlisting>My Group|My Role|My Function</programlisting></para>

        <para>defines an entry which mentions a Group, a Role and a Function.
        If there is a role named My Role belonging to My Group it will be
        used. Otherwise, we'll try to find a role named My Role which doesn't
        belong to any group whatsoever. If this fails, the Role assigned to
        the user will be the first Role which belongs to My Group or, if no
        roles are specifically defined for My Group, the first Role which does
        not belong to any group (usually the default "Subscriber" role created
        by Community ACL during installation). The function assigned to the
        user will be the one named My Function, belonging to the selected
        Role. If it does not exist, we'll try to find a function named My
        Function which does not belong to a role. If there is none, we'll use
        the first function which belongs to the selected Role or, if none is
        defined, the first function which does not belong to any role.</para>

        <tip>
          <para>It's impossible to understand any of the above. It's
          impossible to setup ACLs with the complexity introduced by Groups,
          Roles and Functions. Take my advice and only use Groups in both
          Community ACL and this plugin and just forget about Roles and
          Functions if you value your sanity.</para>
        </tip>

        <para>The plugin has these options:</para>

        <variablelist>
          <varlistentry>
            <term>Add to Community ACL groups</term>

            <listitem>
              <para>This is a list for assigning subscription levels to
              Community ACL groups. When a user has an active subscription to
              the specified level, he'll be added to the Community ACL
              group/role/function mentioned on the right hand of the equal
              sign. Each assignment is done like this:</para>

              <programlisting>LEVEL1=entry1,entry2,entry3</programlisting>

              <para>Where entry1, entry2 and entry3 is a Group/Role/Function
              entry as described above.</para>

              <para>If you want to assign multiple subscription levels to
              multiple entries, you have to do something like that (separate
              multiple lines with a single press of the ENTER key on your
              keyboard):</para>

              <programlisting>LEVEL1=entry1,entry2,entry3
LEVEL2=entry2
LEVEL3=entry4,entry1</programlisting>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Remove from Community ACL groups</term>

            <listitem>
              <para>Likewise, this is the list of the Community ACL groups to
              remove a user from when his subscription to the specified level
              is no longer active. Do note that you can specify a different
              set of groups to remove the user from than the ones you are
              adding him to. For example:</para>

              <programlisting>LEVEL1=entry1,entry2
LEVEL2=entry2
LEVEL3=entry1</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="integration-docman">
        <title>DOCman Integration</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - DOCman Integration</guilabel></para>

        <para>This integration plugin allows you to add and remove users from
        DOCman groups based on their subscription status. This allows you to
        control downloads/uploads to your DOCman downloads based on a user's
        subscription status and can form the basis of a commercial file
        distribution system.</para>

        <para>Please note that this is a smart integration, exactly as
        described in the JUGA plugin in this documentation; instead of adding
        users when a subscription goes active and removing them when a
        subscription goes inactive, Akeeba Subscriptions plugins take a look
        at all of the user's active and inactive subscriptions and decide
        which groups the user should be added to or removed from.</para>

        <para>The plugin has these options:</para>

        <variablelist>
          <varlistentry>
            <term>Add to DOCman groups</term>

            <listitem>
              <para>This is a list for assigning subscription levels to DOCman
              groups. When a user has an active subscription to the specified
              level, he'll be added to the DOCman group mentioned on the right
              hand of the equal sign. Each assignment is done like
              this:</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3</programlisting>

              <para>Where LEVEL1 is the Title of the subscription level and
              Group 1, Group 2 and Group 3 are the names of the DOCman groups
              you want to add a user to when he subscribes. If you want to
              assign multiple subscription levels to multiple groups, you have
              to do something like that (separate multiple lines with a single
              press of the ENTER key on your keyboard):</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3
LEVEL2=Group 2
LEVEL3=Group 4,Group 1</programlisting>

              <para>You can also use the numeric IDs of subscription levels or
              DOCman groups instead of their titles. However, we consider
              working with numeric IDs very counter-intuitive.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Remove from DOCman groups</term>

            <listitem>
              <para>Likewise, this is the list of the DOCman groups to remove
              a user from when his subscription to the specified level is no
              longer active. Do note that you can specify a different set of
              groups to remove the user from than the ones you are adding him
              to. For example:</para>

              <programlisting>LEVEL1=Group 1,Group 2
LEVEL2=Group 2
LEVEL3=Group 1</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>In this example, together with the rules displayed in "Add to
        DOCman groups", when a subscription to the LEVEL1 level expires, the
        user will still belong to DOCman Group 3, as it's not removed from his
        account; only Group 1 and Group 2 are removed. Likewise, if the user
        has an expired LEVEL1 subscription and an active LEVEL2 subscription
        he'll now belong to Group 2 and Group 3: Group 3 because it's not
        removed when his subscription expires and Group 2 because his active
        LEVEL2 subscription suggests that he should be granted Group 2 access
        despite his expired LEVEL1 subscription.</para>

        <para>If you find this hard to understand, join the club. ACLs are not
        meant to be easy to setup or understand. It's a power feature and, as
        such, poses a great difficulty to even the most seasoned web site
        integrators. Take your time and experiment on a dev copy of your site
        before going live.</para>
      </section>

      <section xml:id="integration-jce">
        <title>JCE Integration</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - JCE Integration</guilabel></para>

        <para>This integration plugin allows you to add and remove users from
        JCE (Joomla! Content Editor) groups based on their subscription
        status. This allows you to control the editing permissions of
        individual users based on their subscription status.</para>

        <para>Please note that this is a smart integration, exactly as
        described in the JUGA plugin earlier in this documentation; instead of
        adding users when a subscription goes active and removing them when a
        subscription goes inactive, Akeeba Subscriptions plugins take a look
        at all of the user's active and inactive subscriptions and decide
        which groups the user should be added to or removed from.</para>

        <para>The plugin has these options:</para>

        <variablelist>
          <varlistentry>
            <term>Add to JCE groups</term>

            <listitem>
              <para>This is a list for assigning subscription levels to JCE
              groups. When a user has an active subscription to the specified
              level, he'll be added to the JCE group mentioned on the right
              hand of the equal sign. Each assignment is done like
              this:</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3</programlisting>

              <para>Where LEVEL1 is the Title of the subscription level and
              Group 1, Group 2 and Group 3 are the names of the JCE groups you
              want to add a user to when he subscribes. If you want to assign
              multiple subscription levels to multiple groups, you have to do
              something like that (separate multiple lines with a single press
              of the ENTER key on your keyboard):</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3
LEVEL2=Group 2
LEVEL3=Group 4,Group 1</programlisting>

              <para>You can also use the numeric IDs of subscription levels or
              JCE groups instead of their titles. However, we consider working
              with numeric IDs very counter-intuitive.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Remove from JCE groups</term>

            <listitem>
              <para>Likewise, this is the list of the JCE groups to remove a
              user from when his subscription to the specified level is no
              longer active. Do note that you can specify a different set of
              groups to remove the user from than the ones you are adding him
              to. For example:</para>

              <programlisting>LEVEL1=Group 1,Group 2
LEVEL2=Group 2
LEVEL3=Group 1</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>In this example, together with the rules displayed in "Add to
        JCE groups", when a subscription to the LEVEL1 level expires, the user
        will still belong to JCE Group 3, as it's not removed from his
        account; only Group 1 and Group 2 are removed. Likewise, if the user
        has an expired LEVEL1 subscription and an active LEVEL2 subscription
        he'll now belong to Group 2 and Group 3: Group 3 because it's not
        removed when his subscription expires and Group 2 because his active
        LEVEL2 subscription suggests that he should be granted Group 2 access
        despite his expired LEVEL1 subscription.</para>

        <para>If you find this hard to understand, join the club. ACLs are not
        meant to be easy to setup or understand. It's a power feature and, as
        such, poses a great difficulty to even the most seasoned web site
        integrators. Take your time and experiment on a dev copy of your site
        before going live.</para>
      </section>

      <section xml:id="integration-jomsocial">
        <title>JomSocial integration</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - JomSocial Integration</guilabel></para>

        <para>This integration plugin allows you to add and remove users from
        JomSocial groups based on their subscription status. This allows you
        to control access to your JomSocial groups based on a user's
        subscription status.</para>

        <para>Please note that this is a smart integration, exactly as
        described in the JUGA plugin in this documentation; instead of adding
        users when a subscription goes active and removing them when a
        subscription goes inactive, Akeeba Subscriptions plugins take a look
        at all of the user's active and inactive subscriptions and decide
        which groups the user should be added to or removed from.</para>

        <para>The plugin has these options:</para>

        <variablelist>
          <varlistentry>
            <term>Add to JomSocial groups</term>

            <listitem>
              <para>This is a list for assigning subscription levels to
              JomSocial groups. When a user has an active subscription to the
              specified level, he'll be added to the JomSocial group mentioned
              on the right hand of the equal sign. Each assignment is done
              like this:</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3</programlisting>

              <para>Where LEVEL1 is the Title of the subscription level and
              Group 1, Group 2 and Group 3 are the names of the JomSocial
              groups you want to add a user to when he subscribes. If you want
              to assign multiple subscription levels to multiple groups, you
              have to do something like that (separate multiple lines with a
              single press of the ENTER key on your keyboard):</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3
LEVEL2=Group 2
LEVEL3=Group 4,Group 1</programlisting>

              <para>You can also use the numeric IDs of subscription levels or
              JomSocial groups instead of their titles. However, we consider
              working with numeric IDs very counter-intuitive.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Remove from JomSocial groups</term>

            <listitem>
              <para>Likewise, this is the list of the JomSocial groups to
              remove a user from when his subscription to the specified level
              is no longer active. Do note that you can specify a different
              set of groups to remove the user from than the ones you are
              adding him to. For example:</para>

              <programlisting>LEVEL1=Group 1,Group 2
LEVEL2=Group 2
LEVEL3=Group 1</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>In this example, together with the rules displayed in "Add to
        JomSocial groups", when a subscription to the LEVEL1 level expires,
        the user will still belong to JomSocial Group 3, as it's not removed
        from his account; only Group 1 and Group 2 are removed. Likewise, if
        the user has an expired LEVEL1 subscription and an active LEVEL2
        subscription he'll now belong to Group 2 and Group 3: Group 3 because
        it's not removed when his subscription expires and Group 2 because his
        active LEVEL2 subscription suggests that he should be granted Group 2
        access despite his expired LEVEL1 subscription.</para>

        <para>If you find this hard to understand, join the club. ACLs are not
        meant to be easy to setup or understand. It's a power feature and, as
        such, poses a great difficulty to even the most seasoned web site
        integrators. Take your time and experiment on a dev copy of your site
        before going live.</para>
      </section>

      <section xml:id="integration-joomla">
        <title>Joomla! 1.6 User Groups Integration</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - Joomla! 1.6 Usergroups Integration</guilabel></para>

        <para>This integration plugin allows you to add and remove users from
        Joomla! 1.6 groups based on their subscription status. This allows you
        to fully utilize Joomla! 1.6's built-in ACL capabilities on compatible
        extensions.</para>

        <para>Please note that this is a smart integration, exactly as
        described in the JUGA plugin earlier in this documentation; instead of
        adding users when a subscription goes active and removing them when a
        subscription goes inactive, Akeeba Subscriptions plugins take a look
        at all of the user's active and inactive subscriptions and decide
        which groups the user should be added to or removed from.</para>

        <para>The plugin has these options:</para>

        <variablelist>
          <varlistentry>
            <term>Add to Joomla! 1.6 groups</term>

            <listitem>
              <para>This is a list for assigning subscription levels to
              Joomla! groups. When a user has an active subscription to the
              specified level, he'll be added to the Joomla! group mentioned
              on the right hand of the equal sign. Each assignment is done
              like this:</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3</programlisting>

              <para>Where LEVEL1 is the Title of the subscription level and
              Group 1, Group 2 and Group 3 are the names of the Joomla! groups
              you want to add a user to when he subscribes. If you want to
              assign multiple subscription levels to multiple groups, you have
              to do something like that (separate multiple lines with a single
              press of the ENTER key on your keyboard):</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3
LEVEL2=Group 2
LEVEL3=Group 4,Group 1</programlisting>

              <para>You can also use the numeric IDs of subscription levels or
              Joomla! groups instead of their titles. However, we consider
              working with numeric IDs very counter-intuitive.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Remove from Joomla! 1.6 groups</term>

            <listitem>
              <para>Likewise, this is the list of the Joomla! groups to remove
              a user from when his subscription to the specified level is no
              longer active. Do note that you can specify a different set of
              groups to remove the user from than the ones you are adding him
              to. For example:</para>

              <programlisting>LEVEL1=Group 1,Group 2
LEVEL2=Group 2
LEVEL3=Group 1</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>In this example, together with the rules displayed in "Add to
        Joomla! groups", when a subscription to the LEVEL1 level expires, the
        user will still belong to Joomla!'s Group 3, as it's not removed from
        his account; only Group 1 and Group 2 are removed. Likewise, if the
        user has an expired LEVEL1 subscription and an active LEVEL2
        subscription he'll now belong to Group 2 and Group 3: Group 3 because
        it's not removed when his subscription expires and Group 2 because his
        active LEVEL2 subscription suggests that he should be granted Group 2
        access despite his expired LEVEL1 subscription.</para>

        <para>If you find this hard to understand, join the club. ACLs are not
        meant to be easy to setup or understand. It's a power feature and, as
        such, poses a great difficulty to even the most seasoned web site
        integrators. Take your time and experiment on a dev copy of your site
        before going live.</para>
      </section>

      <section xml:id="integration-juga">
        <title>JUGA Integration</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - JUGA Integration</guilabel></para>

        <para>This integration plugin allows you to add and remove users from
        JUGA groups based on their subscription status. Please note that this
        is a smart integration; instead of adding users when a subscription
        goes active and removing them when a subscription goes inactive,
        Akeeba Subscriptions plugins take a look at all of the user's active
        and inactive subscriptions and decide which groups the user should be
        added to or removed from. The idea is this:</para>

        <orderedlist>
          <listitem>
            <para>All groups to be added to, based on active subscriptions of
            the user, are assembled to the ADD list.</para>
          </listitem>

          <listitem>
            <para>All groups to be removed from, based on inactive
            subscriptions of the user, are assembled to the REMOVE
            list.</para>
          </listitem>

          <listitem>
            <para>If a JUGA group appears in both the ADD and REMOVE list, it
            is deleted from the REMOVE list. In other words "add" trumps
            "delete". In order to understand this further, here's the deal. If
            one subscription with access to a JUGA group expires, but another
            subscription granting access to the very same group is still
            active, the user's access to this group must remain active.</para>
          </listitem>
        </orderedlist>

        <para>The plugin has these options:</para>

        <variablelist>
          <varlistentry>
            <term>Add to JUGA groups</term>

            <listitem>
              <para>This is a list for assigning subscription levels to JUGA
              groups. When a user has an active subscription to the specified
              level, he'll be added to the JUGA group mentioned on the right
              hand of the equal sign. Each assignment is done like
              this:</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3</programlisting>

              <para>Where LEVEL1 is the Title of the subscription level and
              Group 1, Group 2 and Group 3 are the names of the JUGA groups
              you want to add a user to when he subscribes. If you want to
              assign multiple subscription levels to multiple groups, you have
              to do something like that (separate multiple lines with a single
              press of the ENTER key on your keyboard):</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3
LEVEL2=Group 2
LEVEL3=Group 4,Group 1</programlisting>

              <para>You can also use the numeric IDs of subscription levels or
              JUGA groups instead of their titles. However, we consider
              working with numeric IDs very counter-intuitive.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Remove from JUGA groups</term>

            <listitem>
              <para>Likewise, this is the list of the JUGA groups to remove a
              user from when his subscription to the specified level is no
              longer active. Do note that you can specify a different set of
              groups to remove the user from than the ones you are adding him
              to. For example:</para>

              <programlisting>LEVEL1=Group 1,Group 2
LEVEL2=Group 2
LEVEL3=Group 1</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>In this example, together with the rules displayed in "Add to
        JUGA groups", when a subscription to the LEVEL1 level expires, the
        user will still belong to JUGA's Group 3, as it's not removed from his
        account; only Group 1 and Group 2 are removed. Likewise, if the user
        has an expired LEVEL1 subscription and an active LEVEL2 subscription
        he'll now belong to Group 2 and Group 3: Group 3 because it's not
        removed when his subscription expires and Group 2 because his active
        LEVEL2 subscription suggests that he should be granted Group 2 access
        despite his expired LEVEL1 subscription.</para>

        <para>If you find this hard to understand, join the club. ACLs are not
        meant to be easy to setup or understand. It's a power feature and, as
        such, poses a great difficulty to even the most seasoned web site
        integrators. Take your time and experiment on a dev copy of your site
        before going live.</para>
      </section>

      <section xml:id="integration-jxjomsocial">
        <title>JoomlaXI JomSocial User Profile Types integration</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - JoomlaXI JomSocial User Profile Types
        Integration</guilabel></para>

        <para>This integration plugin allows you to add and remove users from
        JomSocial user types based on their subscription status. This allows
        you to control access to your JomSocial groups based on a user's
        subscription status. This integration requires that both JomSocial by
        Azrul and JomSocial User Profile Types by JoomlaXI be installed on
        your site.</para>

        <para>Please note that this is a smart integration, exactly as
        described in the JUGA plugin in this documentation; instead of adding
        users when a subscription goes active and removing them when a
        subscription goes inactive, Akeeba Subscriptions plugins take a look
        at all of the user's active and inactive subscriptions and decide
        which groups the user should be added to or removed from.</para>

        <para>The plugin has these options:</para>

        <variablelist>
          <varlistentry>
            <term>Add to JoomlaXI JomSocial User Profile Types</term>

            <listitem>
              <para>This is a list for assigning subscription levels to
              JoomlaXI JomSocial User Profile Types. When a user has an active
              subscription to the specified level, he'll be added to the
              JoomlaXI JomSocial User Profile Type mentioned on the right hand
              of the equal sign. Each assignment is done like this:</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3</programlisting>

              <para>Where LEVEL1 is the Title of the subscription level and
              Group 1, Group 2 and Group 3 are the names of the JoomlaXI
              JomSocial User Profile Types you want to add a user to when he
              subscribes. If you want to assign multiple subscription levels
              to multiple groups, you have to do something like that (separate
              multiple lines with a single press of the ENTER key on your
              keyboard):</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3
LEVEL2=Group 2
LEVEL3=Group 4,Group 1</programlisting>

              <para>You can also use the numeric IDs of subscription levels or
              JoomlaXI JomSocial User Profile Types instead of their titles.
              However, we consider working with numeric IDs very
              counter-intuitive.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Remove from JoomlaXI JomSocial User Profile Types</term>

            <listitem>
              <para>Likewise, this is the list of the JoomlaXI JomSocial User
              Profile Types to remove a user from when his subscription to the
              specified level is no longer active. Do note that you can
              specify a different set of groups to remove the user from than
              the ones you are adding him to. For example:</para>

              <programlisting>LEVEL1=Group 1,Group 2
LEVEL2=Group 2
LEVEL3=Group 1</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>In this example, together with the rules displayed in "Add to
        JoomlaXI JomSocial User Profile Types", when a subscription to the
        LEVEL1 level expires, the user will still belong to JoomlaXI JomSocial
        User Profile Types Group 3, as it's not removed from his account; only
        Group 1 and Group 2 are removed. Likewise, if the user has an expired
        LEVEL1 subscription and an active LEVEL2 subscription he'll now belong
        to Group 2 and Group 3: Group 3 because it's not removed when his
        subscription expires and Group 2 because his active LEVEL2
        subscription suggests that he should be granted Group 2 access despite
        his expired LEVEL1 subscription.</para>

        <para>If you find this hard to understand, join the club. ACLs are not
        meant to be easy to setup or understand. It's a power feature and, as
        such, poses a great difficulty to even the most seasoned web site
        integrators. Take your time and experiment on a dev copy of your site
        before going live.</para>
      </section>

      <section xml:id="integration-k2">
        <title>K2 Integration</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - K2 Integration</guilabel></para>

        <para>This integration plugin allows you to add and remove users from
        K2 1.6 groups based on their subscription status. This allows you to
        fully utilize K2's limited ACL capabilities (basically, just control
        front-end editing).</para>

        <warning>
          <para>K2 only allows a user to belong to one and only one group.
          This means that only the latest subscription's K2 group will be
          applied to your user if he holds several subscriptions.</para>
        </warning>

        <para>The plugin has these options:</para>

        <variablelist>
          <varlistentry>
            <term>Add to K2 groups</term>

            <listitem>
              <para>This is a list for assigning subscription levels to K2
              groups. When a user has an active subscription to the specified
              level, he'll be added to the K2 group mentioned on the right
              hand of the equal sign. Each assignment is done like
              this:</para>

              <programlisting>LEVEL1=Group 1</programlisting>

              <para>Where LEVEL1 is the Title of the subscription level and
              Group 1 is the names of the K2 group you want to add a user to
              when he subscribes. If you want to assign multiple subscription
              levels to multiple groups, you have to do something like that
              (separate multiple lines with a single press of the ENTER key on
              your keyboard):</para>

              <programlisting>LEVEL1=Group 1
LEVEL2=Group 2
LEVEL3=Group 3</programlisting>

              <para>You can also use the numeric IDs of subscription levels or
              K2 groups instead of their titles. However, we consider working
              with numeric IDs very counter-intuitive.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Remove from K2 groups</term>

            <listitem>
              <para>Likewise, this is the list of the K2 groups to remove a
              user from when his subscription to the specified level is no
              longer active. Do note that you can specify a different set of
              groups to remove the user from than the ones you are adding him
              to. For example:</para>

              <programlisting>LEVEL1=Group 1
LEVEL2=Group 2
LEVEL3=Group 3</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="integration-ninjaboard">
        <title>NinjaBoard Integration</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - NinjaBoard Integration</guilabel></para>

        <para>This integration plugin allows you to add and remove users from
        NinjaBoard groups based on their subscription status. This allows you
        to control view/post/attachments access to your NinjaBoard forums
        based on a user's subscription status and can form the basis of a
        commercial support forum, like the one we use at
        AkeebaBackup.com.</para>

        <para>Please note that this is a smart integration, exactly as
        described in the JUGA plugin earlier in this documentation; instead of
        adding users when a subscription goes active and removing them when a
        subscription goes inactive, Akeeba Subscriptions plugins take a look
        at all of the user's active and inactive subscriptions and decide
        which groups the user should be added to or removed from.</para>

        <para>The plugin has these options:</para>

        <variablelist>
          <varlistentry>
            <term>Add to NinjaBoard groups</term>

            <listitem>
              <para>This is a list for assigning subscription levels to
              NinjaBoard groups. When a user has an active subscription to the
              specified level, he'll be added to the NinjaBoard group
              mentioned on the right hand of the equal sign. Each assignment
              is done like this:</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3</programlisting>

              <para>Where LEVEL1 is the Title of the subscription level and
              Group 1, Group 2 and Group 3 are the names of the NinjaBoard
              groups you want to add a user to when he subscribes. If you want
              to assign multiple subscription levels to multiple groups, you
              have to do something like that (separate multiple lines with a
              single press of the ENTER key on your keyboard):</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3
LEVEL2=Group 2
LEVEL3=Group 4,Group 1</programlisting>

              <para>You can also use the numeric IDs of subscription levels or
              NinjaBoard groups instead of their titles. However, we consider
              working with numeric IDs very counter-intuitive.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Remove from NinjaBoard groups</term>

            <listitem>
              <para>Likewise, this is the list of the NinjaBoard groups to
              remove a user from when his subscription to the specified level
              is no longer active. Do note that you can specify a different
              set of groups to remove the user from than the ones you are
              adding him to. For example:</para>

              <programlisting>LEVEL1=Group 1,Group 2
LEVEL2=Group 2
LEVEL3=Group 1</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>In this example, together with the rules displayed in "Add to
        NinjaBoard groups", when a subscription to the LEVEL1 level expires,
        the user will still belong to NinjaBoard's Group 3, as it's not
        removed from his account; only Group 1 and Group 2 are removed.
        Likewise, if the user has an expired LEVEL1 subscription and an active
        LEVEL2 subscription he'll now belong to Group 2 and Group 3: Group 3
        because it's not removed when his subscription expires and Group 2
        because his active LEVEL2 subscription suggests that he should be
        granted Group 2 access despite his expired LEVEL1 subscription.</para>

        <para>If you find this hard to understand, join the club. ACLs are not
        meant to be easy to setup or understand. It's a power feature and, as
        such, poses a great difficulty to even the most seasoned web site
        integrators. Take your time and experiment on a dev copy of your site
        before going live.</para>
      </section>

      <section xml:id="integration-tienda">
        <title>Tienda Integration</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - Tienda Integration</guilabel></para>

        <para>This integration plugin allows you to add and remove users from
        Tienda shopper groups based on their subscription status. This allows
        you to set special discounts to subscribers (e.g. a discount club) or
        other Tienda tricks which are based on the shopper groups a user
        belongs to.</para>

        <para>Please note that this is a smart integration, exactly as
        described in the JUGA plugin earlier in this documentation; instead of
        adding users when a subscription goes active and removing them when a
        subscription goes inactive, Akeeba Subscriptions plugins take a look
        at all of the user's active and inactive subscriptions and decide
        which groups the user should be added to or removed from.</para>

        <para>The plugin has these options:</para>

        <variablelist>
          <varlistentry>
            <term>Add to Tienda groups</term>

            <listitem>
              <para>This is a list for assigning subscription levels to Tienda
              groups. When a user has an active subscription to the specified
              level, he'll be added to the Tienda group mentioned on the right
              hand of the equal sign. Each assignment is done like
              this:</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3</programlisting>

              <para>Where LEVEL1 is the Title of the subscription level and
              Group 1, Group 2 and Group 3 are the names of the Tienda groups
              you want to add a user to when he subscribes. If you want to
              assign multiple subscription levels to multiple groups, you have
              to do something like that (separate multiple lines with a single
              press of the ENTER key on your keyboard):</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3
LEVEL2=Group 2
LEVEL3=Group 4,Group 1</programlisting>

              <para>You can also use the numeric IDs of subscription levels or
              Tienda groups instead of their titles. However, we consider
              working with numeric IDs very counter-intuitive.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Remove from Tienda groups</term>

            <listitem>
              <para>Likewise, this is the list of the Tienda groups to remove
              a user from when his subscription to the specified level is no
              longer active. Do note that you can specify a different set of
              groups to remove the user from than the ones you are adding him
              to. For example:</para>

              <programlisting>LEVEL1=Group 1,Group 2
LEVEL2=Group 2
LEVEL3=Group 1</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>In this example, together with the rules displayed in "Add to
        Tienda groups", when a subscription to the LEVEL1 level expires, the
        user will still belong to Tienda Group 3, as it's not removed from his
        account; only Group 1 and Group 2 are removed. Likewise, if the user
        has an expired LEVEL1 subscription and an active LEVEL2 subscription
        he'll now belong to Group 2 and Group 3: Group 3 because it's not
        removed when his subscription expires and Group 2 because his active
        LEVEL2 subscription suggests that he should be granted Group 2 access
        despite his expired LEVEL1 subscription.</para>

        <para>If you find this hard to understand, join the club. ACLs are not
        meant to be easy to setup or understand. It's a power feature and, as
        such, poses a great difficulty to even the most seasoned web site
        integrators. Take your time and experiment on a dev copy of your site
        before going live.</para>
      </section>

      <section xml:id="integration-userdelete">
        <title>Delete users on subscription expiration</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - Delete users with expired
        subscriptions</guilabel></para>

        <para>When this plugin is enabled, when all of the subscriptions of a
        user expire, his Joomla! user record will be permanently deleted from
        the site. This is equivalent to using Manage Users in the back-end to
        delete a user. We consider this plugin to be suitable for a tiny
        minority of sites which want to allow access to their content only to
        registered users but wish to receive payment to register users.</para>

        <warning>
          <para><emphasis role="bold">DELETING USERS IS AN IRREVERSIBLE
          PROCESS! ONCE A USER IS DELETED, ALL INFORMATION ASSOCIATED WITH HIM
          (INCLUDING SUBSCRIPTIONS INFORMATION) IS GONE. FOREVER. YOU WILL NOT
          BE ABLE TO RETRIEVE THEM EVER AGAIN.</emphasis></para>

          <para>This is how this feature is supposed to work. When every
          information pertaining to a user with an expired subscription
          vanishes to thin air do not complain that it is unacceptable or a
          bug; it's not; it's how this is designed to work.</para>
        </warning>
      </section>

      <section xml:id="integration-vm">
        <title>VirtueMart Integration</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - VirtueMart Integration</guilabel></para>

        <important>
          <para>This plugin only works with VirtueMart 1.x. It will NOT work
          with VirtueMart 2.x.</para>
        </important>

        <para>This integration plugin allows you to add and remove users from
        VirtueMart 1.x shopper groups based on their subscription status. This
        allows you to set special discounts to subscribers (e.g. a discount
        club) or other VirtueMart tricks which are based on the shopper groups
        a user belongs to.</para>

        <para>Please note that this is a smart integration, exactly as
        described in the JUGA plugin earlier in this documentation; instead of
        adding users when a subscription goes active and removing them when a
        subscription goes inactive, Akeeba Subscriptions plugins take a look
        at all of the user's active and inactive subscriptions and decide
        which groups the user should be added to or removed from.</para>

        <para>The plugin has these options:</para>

        <variablelist>
          <varlistentry>
            <term>Add to VirtueMart groups</term>

            <listitem>
              <para>This is a list for assigning subscription levels to
              VirtueMart groups. When a user has an active subscription to the
              specified level, he'll be added to the VirtueMart group
              mentioned on the right hand of the equal sign. Each assignment
              is done like this:</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3</programlisting>

              <para>Where LEVEL1 is the Title of the subscription level and
              Group 1, Group 2 and Group 3 are the names of the VirtueMart
              groups you want to add a user to when he subscribes. If you want
              to assign multiple subscription levels to multiple groups, you
              have to do something like that (separate multiple lines with a
              single press of the ENTER key on your keyboard):</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3
LEVEL2=Group 2
LEVEL3=Group 4,Group 1</programlisting>

              <para>You can also use the numeric IDs of subscription levels or
              VirtueMart groups instead of their titles. However, we consider
              working with numeric IDs very counter-intuitive.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Remove from VirtueMart groups</term>

            <listitem>
              <para>Likewise, this is the list of the VirtueMart groups to
              remove a user from when his subscription to the specified level
              is no longer active. Do note that you can specify a different
              set of groups to remove the user from than the ones you are
              adding him to. For example:</para>

              <programlisting>LEVEL1=Group 1,Group 2
LEVEL2=Group 2
LEVEL3=Group 1</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>In this example, together with the rules displayed in "Add to
        VirtueMart groups", when a subscription to the LEVEL1 level expires,
        the user will still belong to VirtueMart Group 3, as it's not removed
        from his account; only Group 1 and Group 2 are removed. Likewise, if
        the user has an expired LEVEL1 subscription and an active LEVEL2
        subscription he'll now belong to Group 2 and Group 3: Group 3 because
        it's not removed when his subscription expires and Group 2 because his
        active LEVEL2 subscription suggests that he should be granted Group 2
        access despite his expired LEVEL1 subscription.</para>

        <para>If you find this hard to understand, join the club. ACLs are not
        meant to be easy to setup or understand. It's a power feature and, as
        such, poses a great difficulty to even the most seasoned web site
        integrators. Take your time and experiment on a dev copy of your site
        before going live.</para>
      </section>

      <section xml:id="integration-vm2">
        <title>VirtueMart 2 Integration</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - VirtueMart 2 Integration</guilabel></para>

        <important>
          <para>This plugin only works with VirtueMart 2.x. It will NOT work
          with VirtueMart 1.x.</para>
        </important>

        <para>This integration plugin allows you to add and remove users from
        VirtueMart 2.0 shopper groups based on their subscription status. This
        allows you to set special discounts to subscribers (e.g. a discount
        club) or other VirtueMart tricks which are based on the shopper groups
        a user belongs to.</para>

        <para>Please note that this is a smart integration, exactly as
        described in the JUGA plugin earlier in this documentation; instead of
        adding users when a subscription goes active and removing them when a
        subscription goes inactive, Akeeba Subscriptions plugins take a look
        at all of the user's active and inactive subscriptions and decide
        which groups the user should be added to or removed from.</para>

        <para>The plugin has these options:</para>

        <variablelist>
          <varlistentry>
            <term>Add to VirtueMart groups</term>

            <listitem>
              <para>This is a list for assigning subscription levels to
              VirtueMart 2.x groups. When a user has an active subscription to
              the specified level, he'll be added to the VirtueMart 2.x group
              mentioned on the right hand of the equal sign. Each assignment
              is done like this:</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3</programlisting>

              <para>Where LEVEL1 is the Title of the subscription level and
              Group 1, Group 2 and Group 3 are the names of the VirtueMart 2.x
              groups you want to add a user to when he subscribes. If you want
              to assign multiple subscription levels to multiple groups, you
              have to do something like that (separate multiple lines with a
              single press of the ENTER key on your keyboard):</para>

              <programlisting>LEVEL1=Group 1,Group 2,Group 3
LEVEL2=Group 2
LEVEL3=Group 4,Group 1</programlisting>

              <para>You can also use the numeric IDs of subscription levels or
              VirtueMart groups instead of their titles. However, we consider
              working with numeric IDs very counter-intuitive.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Remove from VirtueMart groups</term>

            <listitem>
              <para>Likewise, this is the list of the VirtueMart 2.x groups to
              remove a user from when his subscription to the specified level
              is no longer active. Do note that you can specify a different
              set of groups to remove the user from than the ones you are
              adding him to. For example:</para>

              <programlisting>LEVEL1=Group 1,Group 2
LEVEL2=Group 2
LEVEL3=Group 1</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>In this example, together with the rules displayed in "Add to
        VirtueMart groups", when a subscription to the LEVEL1 level expires,
        the user will still belong to VirtueMart Group 3, as it's not removed
        from his account; only Group 1 and Group 2 are removed. Likewise, if
        the user has an expired LEVEL1 subscription and an active LEVEL2
        subscription he'll now belong to Group 2 and Group 3: Group 3 because
        it's not removed when his subscription expires and Group 2 because his
        active LEVEL2 subscription suggests that he should be granted Group 2
        access despite his expired LEVEL1 subscription.</para>

        <para>If you find this hard to understand, join the club. ACLs are not
        meant to be easy to setup or understand. It's a power feature and, as
        such, poses a great difficulty to even the most seasoned web site
        integrators. Take your time and experiment on a dev copy of your site
        before going live.</para>
      </section>

      <section xml:id="integration-redshop">
        <title>RedShop Integration</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - RedShop Integration</guilabel></para>

        <para>This integration plugin allows you to add and remove users from
        RedShop shopper groups based on their subscription status. This allows
        you to set special discounts to subscribers (e.g. a discount club) or
        other RedShop tricks which are based on the shopper groups a user
        belongs to.</para>

        <para>Please note that this is a smart integration, exactly as
        described in the JUGA plugin earlier in this documentation; instead of
        adding users when a subscription goes active and removing them when a
        subscription goes inactive, Akeeba Subscriptions plugins take a look
        at all of the user's active and inactive subscriptions and decide
        which groups the user should be added to or removed from.</para>

        <important>
          <para>RedShop allows a user to belong to exactly one shopper
          group.</para>
        </important>

        <para>The plugin has these options:</para>

        <variablelist>
          <varlistentry>
            <term>Add to RedShop groups</term>

            <listitem>
              <para>This is a list for assigning subscription levels to
              RedShop groups. When a user has an active subscription to the
              specified level, he'll be added to the RedShop group mentioned
              on the right hand of the equal sign. Each assignment is done
              like this:</para>

              <programlisting>LEVEL1=Group 1
LEVEL2=Group 2
LEVEL3=Group 3</programlisting>

              <para>Where LEVEL1 is the Title of the subscription level and
              Group 1 is the name of the RedShop group you want to add a user
              to when he subscribes.</para>

              <para>You can also use the numeric IDs of subscription levels or
              RedShop groups instead of their titles. However, we consider
              working with numeric IDs very counter-intuitive.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Remove from RedShop groups</term>

            <listitem>
              <para>Likewise, this is the list of the RedShop groups to remove
              a user from when his subscription to the specified level is no
              longer active. Do note that you can specify a different set of
              groups to remove the user from than the ones you are adding him
              to. For example:</para>

              <programlisting>LEVEL1=Group 1
LEVEL2=Group 2
LEVEL3=Group 1</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="integration-samplefields">
        <title>Sample Fields</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - Sample Fields</guilabel></para>

        <para>Since Akeeba Subscriptions 1.0.0 it is possible to have custom
        fields in the subscription page by means of plugins. These fields are
        stored as JSON inside each user's <database>params</database> field in
        the <database>#__akeebasubs_users</database> table. Developers can
        easily create plugins to add as many fields as they want. The "Sample
        Fields" plugin is a demonstration of this feature which also acts as a
        self-documenting tutorial for developers. It adds two custom fields
        (Gender and Age Group).</para>
      </section>

      <section xml:id="integration-autocity">
        <title>Automatic Country and City fill</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - Automatic Country and City fill</guilabel></para>

        <para>Since Akeeba Subscriptions 1.0.0 it is possible to have plugins
        which can override user information (e.g. name, address) and can also
        be notified when user's information is being saved. This allows for
        very advanced integrations. One possibility is to automatically fetch
        such information from external services and component, e.g. using a
        geolocation service or fetching user information from Community
        Builder, JomSocial, etc. The other possibility is to provide a
        "reverse integration", e.g. update Community Builder or JomSocial
        fields based on the information the user entered in the subscription
        page, essentially making the user believe that all of his information
        is managed in a single place.</para>

        <para>This particular plugin acts as a demonstration of this plugin
        system. It will query the user's IP address against the free
        hostip.info service and populate the country and city fields, unless
        the user has overridden them, i.e. he has bought another subscription
        in the past.</para>
      </section>

      <section xml:id="integration-sql">
        <title>Custom SQL scripts</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - Custom SQL scripts</guilabel></para>

        <para>This plugin can run arbitrary SQL commands when a subscription
        becomes active or inactive. Please note that this plugin is very
        naive. For starters, it will run the SQL commands once for every
        active and inactive subscriptions it encounters. If you have two
        disabled subscriptions and five enabled subscriptions on a specific
        level it will run the deactivation SQL twice and the activation SQL
        five times. Moreover, the plugin fires: when a new subscription is
        created; when the subscription status changes for any reason (payment
        status changes, manual disable/enable, automatic enable/disable due to
        Valid From/To dates being reached) and when you click on the Run
        Integration button.</para>

        <para>In the plugin's parameters you can define the SQL commands to
        run. In all cases, you can do something like this:</para>

        <programlisting>LEVEL1=INSERT INTO #__foobar (`user_id`,`something`) VALUES( '<replaceable>[USERID]</replaceable>', 'myvalue' );</programlisting>

        <para>The leftmost part is the subscription level for which the SQL
        command will run. The rightmost part is the list of SQL commands,
        separated by semicolons. The <replaceable>[USERID]</replaceable>
        variable will be replaced with the user's numeric ID for the user
        whose subscription Akeeba Subscriptions is currently processing. The
        [USERNAME] variable will be replaced with the user's username
        (available since Akeeba Subscriptions 2.1).</para>
      </section>

      <section xml:id="integration-redshopusersync">
        <title>RedShop User Synchronisation</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - RedShop User Synchronisation</guilabel></para>

        <para>This plugin provides two-way synchronisation between the user
        data stored in RedShop and Akeeba Subscriptions. Such data include the
        name of the user, email address, address data, business name and VAT
        number. When enabled, two things will happen:</para>

        <itemizedlist>
          <listitem>
            <para>When a user enters the subscription page, the form will be
            pre-filled with his main RedShop address details, as long as he's
            logged in</para>
          </listitem>

          <listitem>
            <para>When the user submits the subscription form, the main
            RedShop address of this user will be created/updated with the
            information he entered in the subscription form</para>
          </listitem>
        </itemizedlist>

        <para>This plugin WILL NOT magically synchronise data when it changes
        in RedShop. The synchronisation occurs ONLY when the user is visiting
        the subscription page to make a new subscription or "renew" an
        existing one (subscription renewal in Akeeba Subscriptions is the same
        thing as a new subscription).</para>
      </section>

      <section xml:id="integration-kunena">
        <title>Kunena Integration</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - Kunena Integration</guilabel></para>

        <para>This integration plugin allows you to add and remove users from
        Kunena groups based on their subscription status. This allows you to
        fully utilize Kunena's built-in ACL capabilities.</para>

        <para>The plugin has these options:</para>

        <variablelist>
          <varlistentry>
            <term>Add to Kunena groups</term>

            <listitem>
              <para>This is a list for assigning subscription levels to Kunena
              groups. When a user has an active subscription to the specified
              level, he'll be added to the Kunena group mentioned on the right
              hand of the equal sign. Each assignment is done like
              this:</para>

              <programlisting>LEVEL1=Group 1, Group 2</programlisting>

              <para>Where LEVEL1 is the Title of the subscription level and
              Group 1 and Group 2 are the names of the Kunena groups you want
              to add a user to when he subscribes (separate multiple groups
              with a comma). If you want to assign multiple subscription
              levels to multiple groups, you have to do something like that
              (separate multiple lines with a single press of the ENTER key on
              your keyboard):</para>

              <programlisting>LEVEL1=Group 1, Group 2
LEVEL2=Group 2
LEVEL3=Group 3, Group 4, Group 5</programlisting>

              <para>You can also use the numeric IDs of subscription levels or
              Kunena groups instead of their titles. However, we consider
              working with numeric IDs very counter-intuitive.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Remove from Kunena groups</term>

            <listitem>
              <para>Likewise, this is the list of the Kunena groups to remove
              a user from when his subscription to the specified level is no
              longer active. Do note that you can specify a different set of
              groups to remove the user from than the ones you are adding him
              to. For example:</para>

              <programlisting>LEVEL1=Group 1
LEVEL2=Group 2
LEVEL3=Group 3, Group 4</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="integration-iproperty">
        <title>Intellectual Property integration</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - Intellectual Property Integration</guilabel></para>

        <para>This plugin integrates Akeeba Subscriptions with the
        Intellectual Property real estate component by The Thinkery LLC. It
        allows subscribers to specific Subscription Levels to be automatically
        assigned as Agents in Intellectual Property. This allows you to create
        a real estate portal with self-registering real estate agents. </para>

        <para>The plugin has these options:</para>

        <variablelist>
          <varlistentry>
            <term>Add to Intellectual Property</term>

            <listitem>
              <para>When a user has an active subscription in this level, he
              is added to Intellectual Property. If the user did not
              previously have an Agent record associated with his user
              account, a new Company and a new Agent record are created and
              activated. If the user had existing, but unpublished, Agent
              records, the plugin will activate those records but will NOT
              create a new Company and/or Agent record.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Remove from Intellectual Property</term>

            <listitem>
              <para>When a user has an expired subscription in this level, he
              is removed from Intellectual Property. This means that all Agent
              records associated with this user account will be
              unpublished.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>

    <section xml:id="plugins-other">
      <title>Other plugins</title>

      <para>Akeeba Subscriptions comes with more standard Joomla! plugins
      which accomplish a variety of tasks, from email communications to
      content filtering.</para>

      <section xml:id="plugin-asexpirationcontrol">
        <title>Subscription expiration control</title>

        <para>Displayed in the Plugins Manager as: <emphasis
        role="bold">System - Akeeba Subscriptions Expiration
        Control</emphasis></para>

        <para>Akeeba Subscriptions will automatically expire your users'
        subscriptions when they visit a page with an Akeeba Subscriptions
        module on your site after their subscription expiration date. However,
        if you want subscription expiration to be performed automatically, you
        need to publish this plugin. It will fire once per day, expiring
        subscriptions past their expiration date. We strongly recommend
        publishing this plugin at all times.</para>
      </section>

      <section xml:id="plugin-subscriptionemails">
        <title>Subscription emails</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - Emails</guilabel></para>

        <para>When this plugin is published, an email will be sent out to the
        user when any change in the status of the subscription has taken
        place. For a complete list of the events on which an email is sent you
        can take a look at the language file, e.g.
        <filename>administrator/language/en-GB/en-GB.plg_akeebasubs_subscriptionemails.ini</filename>.
        Please note that if you are running a multilingual site, the site's
        active language at the time the subscription was registered is saved
        as the user's default language. As long as translation files for that
        language exist for our email plugin, then all emails the user receives
        will be in that language (the user's default language).</para>

        <para>If you want to customise the email messages, you can easily do
        so! First, you will need to find your language's language code. In
        order to do that, just take a look at administrator/language. You will
        see a lot of directories in there. en-GB is the English (United
        Kingdom) language and, depending on which languages you have installed
        on your site, you will see more directories e.g. es-ES for Spanish
        (Spain), de-DE for German (Germany), el-GR for Greek (Greece) and so
        on. Note that down. Whenever you see xx-XX below, replace it with your
        own language's language code.</para>

        <para>Go inside the <filename>administrator/language/xx-XX</filename>
        directory. Find the
        <filename>xx-XX.plg_akeebasubs_subscriptionemails.ini</filename> file
        and copy it to
        <filename>xx-XX.plg_akeebasubs_subscriptionemails.override.ini</filename>
        Now, edit any of the subscription email texts. The Emails plugin will
        use your override file instead of the default when sending out
        emails!</para>

        <note>
          <para>This plugin uses Joomla!'s mail system. You have to ensure
          that your site can send out emails (e.g. use the Mass Mail feature
          to send a test email to Super Administrators) before activating this
          plugin.</para>
        </note>

        <para>We strongly recommend publishing this plugin at all
        times.</para>
      </section>

      <section xml:id="plugin-adminemails">
        <title>Administrator emails</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - Administrator Emails</guilabel></para>

        <para>When this plugin is published, an email will be sent out to the
        administrator (you can define the email address of the administrator)
        when any change in the status of a subscription has taken place. For a
        complete list of the events on which an email is sent you can take a
        look at the language file, e.g.
        <filename>administrator/language/en-GB/en-GB.plg_akeebasubs_afminemails.ini</filename>.
        Please note that if you are running a multilingual site, the site's
        active language at the time the subscription was registered is saved
        as the user's default language. As long as translation files for that
        language exist for our email plugin, then the emails the
        administrators will receive will be in that language (the default
        language of the user whose subscription has been modified).</para>

        <para>If you want to customise the email messages, you can easily do
        so! First, you will need to find your language's language code. In
        order to do that, just take a look at administrator/language. You will
        see a lot of directories in there. en-GB is the English (United
        Kingdom) language and, depending on which languages you have installed
        on your site, you will see more directories e.g. es-ES for Spanish
        (Spain), de-DE for German (Germany), el-GR for Greek (Greece) and so
        on. Note that down. Whenever you see xx-XX below, replace it with your
        own language's language code.</para>

        <para>Go inside the <filename>administrator/language/xx-XX</filename>
        directory. Find the
        <filename>xx-XX.plg_akeebasubs_adminemails.ini</filename> file and
        copy it to
        <filename>xx-XX.plg_akeebasubs_adminemails.override.ini</filename>
        Now, edit any of the subscription email texts. The Emails plugin will
        use your override file instead of the default when sending out
        emails!</para>

        <note>
          <para>This plugin uses Joomla!'s mail system. You have to ensure
          that your site can send out emails (e.g. use the Mass Mail feature
          to send a test email to Super Administrators) before activating this
          plugin.</para>
        </note>
      </section>

      <section xml:id="plugin-affemails">
        <title>Affiliate emails</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Akeeba
        Subscriptions - Emails to Affiliates</guilabel></para>

        <para>When this plugin is published, an email will be sent out to an
        affiliate when a subscription linked to his affiliate ID is activated
        (the payment status changes to C - Complete). For a complete list of
        the events on which an email is sent you can take a look at the
        language file, e.g.
        <filename>administrator/language/en-GB/en-GB.plg_akeebasubs_affemails.ini</filename>.</para>

        <para>If you want to customise the email messages, you can easily do
        so! First, you will need to find your language's language code. In
        order to do that, just take a look at administrator/language. You will
        see a lot of directories in there. en-GB is the English (United
        Kingdom) language and, depending on which languages you have installed
        on your site, you will see more directories e.g. es-ES for Spanish
        (Spain), de-DE for German (Germany), el-GR for Greek (Greece) and so
        on. Note that down. Whenever you see xx-XX below, replace it with your
        own language's language code.</para>

        <para>Go inside the <filename>administrator/language/xx-XX</filename>
        directory. Find the
        <filename>xx-XX.plg_akeebasubs_affemails.ini</filename> file and copy
        it to <filename>xx-XX.plg_akeebasubs_affemails.override.ini</filename>
        Now, edit any of the subscription email texts. The Emails plugin will
        use your override file instead of the default when sending out
        emails!</para>

        <note>
          <para>This plugin uses Joomla!'s mail system. You have to ensure
          that your site can send out emails (e.g. use the Mass Mail feature
          to send a test email to Super Administrators) before activating this
          plugin.</para>
        </note>
      </section>

      <section xml:id="plugin-asexpirationnotify">
        <title>Subscription expiration notification</title>

        <para>Displayed in the Plugins Manager as: <guilabel>System - Akeeba
        Subscriptions Expiration Notification</guilabel></para>

        <para>This plugin will notify a user before his subscription's
        expiration, based on the notification settings of each subscription
        level.</para>

        <note>
          <para>This plugin uses Joomla!'s mail system. You have to ensure
          that your site can send out emails (e.g. use the Mass Mail feature
          to send a test email to Super Administrators) before activating this
          plugin.</para>
        </note>

        <para>We strongly recommend publishing this plugin at all
        times.</para>

        <para>If you want to customise the email messages, you can easily do
        so! First, you will need to find your language's language code. In
        order to do that, just take a look at administrator/language. You will
        see a lot of directories in there. en-GB is the English (United
        Kingdom) language and, depending on which laguages you have installed
        on your site, you will see more directories e.g. es-ES for Spanish
        (Spain), de-DE for German (Germany), el-GR for Greek (Greece) and so
        on. Note that down. Whenever you see xx-XX below, replace it with your
        own language's language code.</para>

        <para>Go inside the <filename>administrator/language/xx-XX</filename>
        directory. Find the
        <filename>xx-XX.plg_system_asexpirationnotify.ini</filename> file and
        copy it to
        <filename>xx-XX.plg_system_asexpirationnotify.override.ini</filename>
        Now, edit any of the subscription email texts. The Emails plugin will
        use your override file instead of the default when sending out
        emails!</para>
      </section>

      <section xml:id="plugin-asrestricted">
        <title>Content restriction</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Content - Akeeba
        Subscriptions Restricted</guilabel></para>

        <para>This content plugin allows you to show parts of your content
        only to specific subscribers. This is a very powerful feature that
        allows you to alter the displayed content based on the user's
        subscription status.</para>

        <note>
          <para>It cannot "hide" entire articles, e.g. not show them at all to
          non-subscribers. At best, only the title will be shown. If you want
          to completely hide articles and block unsubscribed user access to
          entire categories or sections in Joomla! 1.5 you will have to use an
          ACL solution, like Dioscouri's JUGA, NoixACL or similar.</para>

          <para>If you have Joomla! 1.6 or later you can use the bundled
          Joomla! 1.6 User Group integration plugin to automatically assign
          subscribers to Joomla!'s groups and then use Joomla!'s ACL feature
          to fine-tune which users have access to which articles.</para>
        </note>

        <note>
          <para>The following documentation adds a space between the curly
          brackets ({ and }). This is done in order for Joomla! not to process
          the documentation text as plugin instructions. When you use the
          plugin, please DO NOT add a space between the curly braces and its
          contents. Thank you!</para>
        </note>

        <para>Its syntax is:</para>

        <programlisting>{ akeebasubs <replaceable>expression</replaceable> }Your content{ /akeebasubs }</programlisting>

        <para>This means that "Your content" will only be displayed to users
        whose subscriptions satisfy the <replaceable>expression</replaceable>.
        In the simplest form, expression is just the name of a subscription
        level, e.g.</para>

        <programlisting>{ akeebasubs LEVEL1 }Your content{ /akeebasubs }</programlisting>

        <para>If you want to present the content to someone who holds an
        active subscription to both LEVEL1 and LEVEL2, you can use the
        <option>&amp;&amp;</option> (logic and) operator:</para>

        <programlisting>{ akeebasubs LEVEL1 <option>&amp;&amp;</option> LEVEL2 }Your content{ /akeebasubs }</programlisting>

        <para>Likewise, you can use the || (logic or) operator to present the
        content to anyone who has a subscription to any of LEVEL3 or LEVEL4
        levels:</para>

        <programlisting>{ akeebasubs LEVEL3 <option>||</option> LEVEL4 }Your content{ /akeebasubs }</programlisting>

        <para>Important note: The logical OR consists of two "pipe" symbols.
        These are not the same as capital I! On a Mac's keyboard, the pipe
        symbol is present next to the ENTER key, accessible by pressing
        SHIFT-\. On most Windows/Linux machines, this key is usually somewhere
        near the ENTER key and is most likely accessible by pressing SHIFT-\
        as well.</para>

        <para>You can also negate the logic. For example, you can present the
        content to anyone having a subscription to neither LEVEL1 nor LEVEL3
        by using the ! (logical not) operator:</para>

        <programlisting>{ akeebasubs !LEVEL1 &amp;&amp; !LEVEL3 }Your content{ /akeebasubs }</programlisting>

        <para>If you specify multiple operators, the precedence is NOT, AND,
        OR. This means that the exclamation mark is processed first, the
        ampersands second and the bars last. Example:</para>

        <programlisting>{ akeebasubs !LEVEL1 || LEVEL2 &amp;&amp; !LEVEL3 }Your content{ /akeebasubs }</programlisting>

        <para>This means that the content will be presented to users who do
        not have a subscription to LEVEL1. Also, if they do have a LEVEL1
        subscription and they are also LEVEL2 (but not LEVEL3) subscribers the
        content will also be shown to them.</para>

        <tip>
          <para>Since Akeeba Subscriptions 1.0 Stable you can also use a
          pseudo-level marked by a single star (*) which matches all active
          subscriptions. For example, to show something to all subscribers
          use:</para>

          <programlisting>{ akeebasubs * }Content to show to all subscribers{ /akeebasubs }</programlisting>

          <para>Additionally, you can use the "not" modifier (exclamation
          mark) to show content only to non-subscribers:</para>

          <programlisting>{ akeebasubs !* }Content to show to non-subscribers{ /akeebasubs }</programlisting>

          <para>You can use this trick to easily show different messages to
          subscribers and non-subscribers, no matter if you have decided on
          the final list or naming of your subscription levels.</para>
        </tip>
      </section>

      <section>
        <title>The Akeeba Subscriptions Link (aslink) plugin</title>

        <para>Displayed in the Plugins Manager as: <guilabel>Content - Akeeba
        Subscriptions Link</guilabel></para>

        <para>The purpose of the aslink plugin is to produce URLs to
        subscription pages if you give it the name of the subscription level,
        its URL or its numeric ID.</para>

        <note>
          <para>The following documentation adds a space between the curly
          brackets ({ and }). This is done in order for Joomla! not to process
          the documentation text as plugin instructions. When you use the
          plugin, please DO NOT add a space between the curly braces and its
          contents. Thank you!</para>
        </note>

        <para>The aslink plugin only produces a URL, not a link. In order to
        create a link, select the text you want to link, click on your WYSIWYG
        editor's link button and when it asks you for a URL, enter the plugin
        code, as shown below.</para>

        <para>Syntax:</para>

        <programlisting>{ aslink MYLEVEL }</programlisting>

        <para>Returns the URL to a subscription level called "MYLEVEL", e.g.
        <uri>http://localhost/component/akeebasubs/new/mylevel?layout=default</uri>.</para>

        <programlisting>{ aslink mylevel }</programlisting>

        <para>Returns the URL to a subscription level whose slug is "mylevel",
        e.g.
        <uri>http://localhost/component/akeebasubs/new/mylevel?layout=default</uri>.</para>

        <programlisting>{ aslink 2 }</programlisting>

        <para>Returns the URL to a subscription level whose numeric ID is 2,
        e.g.
        <uri>http://localhost/component/akeebasubs/new/mylevel?layout=default</uri>.</para>

        <para>In order to find the numeric ID of a level, please go to your
        site's back-end, <guimenu>Components</guimenu>, <guisubmenu>Akeeba
        Subscriptions</guisubmenu>, <guimenuitem>Subscription
        Levels</guimenuitem> and click on the name of the subscription level
        you want. Note the URL in the browser. It's something like
        <uri>http://localhost/administrator/index.php?option=com_akeebasubs&amp;view=level&amp;id=2</uri>.
        The number after &amp;id= is the numeric ID of the level. In this
        example, the numeric ID is 2.</para>

        <para>Moreover, you can use the following syntax:</para>

        <programlisting>{ aslink view=levels }</programlisting>

        <para>to create a link to the Subscription Levels view. This is
        usually quicker than creating a link to a menu item and remembering to
        change that link whenever your menu structure changes.</para>
      </section>
    </section>
  </chapter>

  <chapter xml:id="modules">
    <title>Akeeba Subscriptions' modules</title>

    <para>Akeeba Subscriptions comes with a variety of modules to display
    customized lists of subscription levels or a list of a user's
    subscriptions. Make sure you visit your Module Manager page and have a
    look at them. You can create interesting effects, like a customized and
    categorized subscriptions list page, out of those modules.</para>

    <section xml:id="modules-list-of-active-subs">
      <title>List of active subscriptions</title>

      <para>Displayed in the Modules Manager as: <guilabel>Akeeba
      Subscriptions - List of active subscriptions</guilabel></para>

      <para>This is extremely simple plugin will merely list the current
      user's active subscriptions as an unordered list. It is meant as an
      example of how you can create custom modules for Akeeba
      Subscriptions.</para>
    </section>

    <section xml:id="modules-list-sub-levels">
      <title>List subscription levels</title>

      <para>Displayed in the Modules Manager as: <guilabel>Akeeba
      Subscriptions - List subscription levels</guilabel></para>

      <para>This extremely powerful module allows you to present a list of all
      or specific subscription levels, using either layout, in any module
      position on your site. Combined with Joomla!'s { loadposition } plugin
      you can use this module to assemble the perfect presentation page of
      your subscriptions, grouped any way you please.</para>

      <para>The module has only two options:</para>

      <variablelist>
        <varlistentry>
          <term>Subscription Levels</term>

          <listitem>
            <para>Choose which subscription level(s) to display in the module.
            This is a multiple-selection list. You can use CTRL-click
            (Windows, Linux) or CMD-click (Mac OS X) to select multiple items
            on the list.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Layout</term>

          <listitem>
            <para>Choose which layout you want to use to display your
            subscription levels to the users. You can choose between the
            Default or the Awesome layout, the same layouts you can choose in
            menu items.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </chapter>

  <chapter xml:id="devinfo">
    <title>Developers' information</title>

    <para>Akeeba Subscriptions was designed to be very extensible right from
    its inception. Everything can be accomplished using plugins which can be
    installed through the familiar Joomla! extensions installer.</para>

    <para>The plugins can belong to one of two groups:</para>

    <variablelist>
      <varlistentry>
        <term>akeebasubs</term>

        <listitem>
          <para>This is the plugin group where all integrations live. Plugins
          in this group can implement a plethora of methods which allows them
          to be notified when a subscription's status changes, when the user
          information is read/written and much more.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>akpayment</term>

        <listitem>
          <para>This plugin group is used by Akeeba Subscriptions payment
          plugins. Plugins in this group implement special methods which
          allows them to be notified of the user's intention to pay for a
          subscription, as well as process the payment notification by the
          payment processor and, in turn, let the component know.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The rest of this chapter documents the various plugin events in each
    group. References to existing plugins are made so that you can understand
    how things really work.</para>

    <section xml:id="dev-akeebasubs">
      <title>The "akeebasubs" plugin events</title>

      <section xml:id="dev-onAKSubscriptionChange">
        <title>onAKSubscriptionChange</title>

        <para><emphasis role="bold">Prototype</emphasis>: <code>public
        function onAKSubscriptionChange($row, $info)</code></para>

        <para><emphasis role="bold">Synopsis</emphasis>: This event is called
        whenever a subscription is created or modified.</para>

        <para><emphasis role="bold">Sample plugin</emphasis>:
        plugins/akeebasubs/subscriptionemails.php</para>

        <para>The <code>$row</code> variable contains a JTable descendant
        which gives you access to all of the information in the subscription
        record (#__akeebasubs_subscriptions table's fields). The
        <code>$info</code> variable contains a hash array with useful
        information, including a copy of table before and after the
        modification, the modified rows and the kind of modification (new for
        new record or modified for a modified existing record) that took
        place.</para>

        <para>You cannot change the information in $row or pass data back to
        the component in any way. In fact, this event is called immediately
        after all information has been written to the database.</para>
      </section>

      <section xml:id="dev-onAKUserRefresh">
        <title>onAKUserRefresh</title>

        <para><emphasis role="bold">Prototype</emphasis>: <code>public
        function onAKUserRefresh($user_id)</code></para>

        <para><emphasis role="bold">Synopsis</emphasis>: This event is called
        when the user clicks on the "Refresh Integrations" button in the
        back-end of the Akeeba Subscriptions component. It is called once per
        each subscriber. The $user_id variable contains the numeric Joomla!
        user ID of the subscriber.</para>

        <para><emphasis role="bold">Sample plugin</emphasis>:
        plugins/akeebasubs/juga.php</para>

        <para>You might consider it odd that the event is called per user
        instead of per subscription. However, the integrations in Akeeba
        Subscriptions are "smart". This means that instead of triggering
        functionality based on the enabled status of an individual
        subscription they work based on the enabled status of all
        subscriptions. This allows you to have rules like "if the user has
        SUB1 and SUB2, do this" or "if the user has SUB1 and had a SUB2 but it
        has now expired, do that". Looking at the sample plugin's code you can
        understand how the iteration of the user's subscriptions is made and
        how a plugin can determine which subscription levels the user belongs
        to.</para>
      </section>

      <section xml:id="dev-onSubscriptionFormRender">
        <title>onSubscriptionFormRender</title>

        <para><emphasis role="bold">Prototype</emphasis>: <code>public
        function onSubscriptionFormRender($userparams, $cache)</code></para>

        <para><emphasis role="bold">Synopsis</emphasis>: This event is called
        when the subscription form (front-end, view=level) is displayed. It
        returns an array of extra fields which will be rendered in the form,
        right below the email field and before the address fields.</para>

        <para><emphasis role="bold">Sample plugin</emphasis>:
        plugins/akeebasubs/samplefields.php</para>

        <para>The input of this event's method is two variables:</para>

        <variablelist>
          <varlistentry>
            <term>$userparams</term>

            <listitem>
              <para>This is a copy of the user's record, as stored in the
              #__akeebasubs_users table, in object format. You can access the
              data in the user record as, for example,
              <code>$userparams-&gt;address1</code> in order to get the
              Address 1 field's contents.</para>

              <para>The most important -for you- part of this object is
              <code>$userparams-&gt;params</code> which stores all the extra
              fields' values. For example, if you have defined a field named
              foobar, you can get its stored value as
              <code>$userparams-&gt;params-&gt;foobar</code>.</para>

              <important>
                <para>This object contains the data stored in the database.
                When the user modified this data in the interface and submits
                the form (but the form is invalid) the information in this
                object IS NOT UPDATED. In this case, use the
                <code>$cache</code> variable.</para>
              </important>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>$cache</term>

            <listitem>
              <para>When the user submits the subscription forms but it is
              invalid (errors don't allow it to pass the validation), Akeeba
              Subscriptions stores the user's modified data in the $cache
              array. The information in this array may be different than the
              information in $userparams array.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <bridgehead>Getting the values for your custom fields</bridgehead>

        <para>To cut a long story short, if you have a field named foobar,
        here is how to get its value:</para>

        <programlisting>if(array_key_exists('<replaceable>foobar</replaceable>', $cache['custom'])) {
  $current = $cache['custom']['<replaceable>foobar</replaceable>'];
} else {
  $current = property_exists($userparams-&gt;params, '<replaceable>foobar</replaceable>') ? $userparams-&gt;params-&gt;<replaceable>foobar</replaceable> : <replaceable>'default value'</replaceable>;
}</programlisting>

        <bridgehead>Returning custom field definitions</bridgehead>

        <para>The return of this event is an array which consists of one or
        more hash (key/value pair) arrays. Each of the hash arrays defines
        exactly one extra field and has the following keys:</para>

        <variablelist>
          <varlistentry>
            <term>id</term>

            <listitem>
              <para>String. Required. The field's HTML id.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>label</term>

            <listitem>
              <para>String. Required. The label which appears to the left of
              the field.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>elementHTML</term>

            <listitem>
              <para>String. Required. The HTML of your field.</para>

              <important>
                <para>The name value of your field <emphasis
                role="bold">must</emphasis> be
                <code>custom[<replaceable>id</replaceable>]</code>, where
                <replaceable>id</replaceable> is the HTML id you defined in
                the id key above. Also, the HTML id <emphasis
                role="bold">must</emphasis> be defined and <emphasis
                role="bold">must</emphasis> be equal to the HTML id you
                defined in the id key above. If you don't do that, your extra
                field might never be saved.</para>
              </important>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>invalidLabel</term>

            <listitem>
              <para>String. Optional. This is the label which appears in green
              on the right of the field when the field is valid. The HTML
              element containing this string is named id_valid, where
              <replaceable>id</replaceable> is the HTML id you defined in the
              id key above.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>validLabel</term>

            <listitem>
              <para>String. Optional. This is the label which appears in red
              on the right of the field when the field is invalid. The HTML
              element containing this string is named id_invalid, where
              <replaceable>id</replaceable> is the HTML id you defined in the
              id key above.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>isValid</term>

            <listitem>
              <para>Boolean. Optional. If you defined the invalidLabel and/or
              validLabel fields, pass a boolean here indicating if the field
              is currently valid so that the correct label is shown when the
              page loads.</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <bridgehead>Javascript validation</bridgehead>

        <para>Akeeba Subscriptions does not make any attempt to validate the
        custom fields and update the display status of the valid/invalid
        labels. It is your responsibility. In this event, you can call
        <code>JFactory::getDocument()-&gt;addScriptDeclaration($scriptData)</code>
        where $scriptData is the Javscript validation code.</para>

        <para>In order to make it easier for you, Akeeba Subscriptions offers
        an architecture similar to an observer pattern in the Javscript code.
        You can have Javascript functions called when Akeeba Subscriptions'
        Javascript code is fetching the contents of the fields before sending
        a data validation request through AJAX and another function which is
        called when the validation results are being processed. You can add
        the former to the stack using addToValidationFetchQueue() and the
        latter using addToValidationQueue().</para>

        <para>Please look at the very well documented sample plugin for more
        information regarding all of the above.</para>
      </section>

      <section xml:id="dev-onValidate">
        <title>onValidate</title>

        <para><emphasis role="bold">Prototype</emphasis>: <code>public
        function onValidate($data)</code></para>

        <para><emphasis role="bold">Synopsis</emphasis>: This event is called
        when Akeeba Subscriptions is validating the subscription form.</para>

        <para><emphasis role="bold">Sample plugin</emphasis>:
        plugins/akeebasubs/samplefields.php</para>

        <para>The $data parameter is an object with all the data keys. You are
        interested in <code>$data-&gt;custom</code> which contains the values
        of the custom fields. You can get the value of a custom field named
        "foobar" using <code>$data-&gt;custom['data']</code>.</para>

        <para>The return value is a hash array with the following keys:</para>

        <variablelist>
          <varlistentry>
            <term>custom_validation</term>

            <listitem>
              <para>A hash array of booleans, showing the validation status of
              each field.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>isValid</term>

            <listitem>
              <para>Set to false if any of the validation errors above means
              that the entire subscription form should be deemed invalid,
              otherwise set it to true to not cause the entire form to become
              invalid. The latter is useful when you have an optional field
              whose validation status doesn't play a role in the user's
              ability to complete the subscription transaction.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="dev-onAKUserGetData">
        <title>onAKUserGetData</title>

        <para><emphasis role="bold">Prototype</emphasis>: <code>public
        function onAKUserGetData($userData)</code></para>

        <para><emphasis role="bold">Synopsis</emphasis>: This plugin is called
        when Akeeba Subscriptions is fetching the user data the first time in
        the current session that the user is visiting the Subscription
        (view=level) page</para>

        <para><emphasis role="bold">Sample plugin</emphasis>:
        plugins/akeebasubs/autocity.php</para>

        <para>This method is called whenever a user starts a new subscription
        and Akeeba Subscriptions wants to fetch user data. You can use it to
        fetch user information from additional sources and return them in an
        array. The values in the array will replace the values stored in the
        user's profile.</para>

        <para>The $userData variable contains an object with already fetched
        user information from the #__akeebasubs_users table.</para>

        <para>Returns a key/value array with user information
        overrides.</para>
      </section>

      <section xml:id="dev-onAKUserSaveData">
        <title>onAKUserSaveData</title>

        <para><emphasis role="bold">Prototype</emphasis>: <code>public
        function onAKUserSaveData($row)</code></para>

        <para><emphasis role="bold">Synopsis</emphasis>: This plugin is called
        when Akeeba Subscriptions is saving user's data to the
        database.</para>

        <para><emphasis role="bold">Sample plugin</emphasis>:
        plugins/akeebasubs/autocity.php</para>

        <para>This method is called whenever Akeeba Subscriptions is updating
        the user record with new information, either during sign-up or when
        you manually update this information in the back-end.</para>

        <para>The $row variable contains a KRowDatabaseDefault object with the
        information to be stored in the #__akeebasubs_users table.</para>
      </section>
    </section>

    <section xml:id="dev-akpayment">
      <title>The "akpayment" plugin events</title>

      <section>
        <title>onAKPaymentGetIdentity</title>

        <para><emphasis role="bold">Prototype</emphasis>: <code>public
        function onAKPaymentGetIdentity()</code></para>

        <para><emphasis role="bold">Synopsis</emphasis>: Returns the internal
        name and the human readable description of this payment plugin.</para>

        <para><emphasis role="bold">Sample plugin</emphasis>:
        plugins/akpayment/paypal.php</para>

        <para>Returns a hash array:</para>

        <variablelist>
          <varlistentry>
            <term>name</term>

            <listitem>
              <para>The internal payment processor plugin name. If you have
              plg_akpayment_foobar then this must be foobar.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>title</term>

            <listitem>
              <para>The name of the payment processor as will appear on the
              subscription page, e.g. "Foobar Payments", "Credit Card",
              etc.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>onAKPaymentNew</title>

        <para><emphasis role="bold">Prototype</emphasis>: <code>public
        function onAKPaymentNew($paymentmethod, $user, $level,
        $subscription)</code></para>

        <para><emphasis role="bold">Synopsis</emphasis>: This method is called
        whenever the user asks for a payment to be made for his new
        subscription.</para>

        <para><emphasis role="bold">Sample plugin</emphasis>:
        plugins/akpayment/paypal.php</para>
      </section>

      <section>
        <title>onAKPaymentCallback</title>

        <para><emphasis role="bold">Prototype</emphasis>: <code>public
        function onAKPaymentCallback($paymentmethod, $data)</code></para>

        <para><emphasis role="bold">Synopsis</emphasis>: This method is called
        whenever the payment processor posts back to Akeeba Subscriptions to
        notify us of a payment having been processed.</para>

        <para><emphasis role="bold">Sample plugin</emphasis>:
        plugins/akpayment/paypal.php</para>
      </section>
    </section>
  </chapter>
</book>
